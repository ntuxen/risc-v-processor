circuit ProcessorTopLevel :
  module InstrMemory :
    input clock : Clock
    input reset : Reset
    output io : { flip addr : UInt<10>, dataOut : UInt<32>}

    wire mem : UInt<32>[256] @[InstrMemory.scala 31:17]
    mem[0] <= UInt<32>("h3000293") @[InstrMemory.scala 38:12]
    mem[1] <= UInt<32>("h4000313") @[InstrMemory.scala 38:12]
    mem[2] <= UInt<32>("h393") @[InstrMemory.scala 38:12]
    mem[3] <= UInt<32>("h413") @[InstrMemory.scala 38:12]
    mem[4] <= UInt<32>("h600493") @[InstrMemory.scala 38:12]
    mem[5] <= UInt<32>("h1e00913") @[InstrMemory.scala 38:12]
    mem[6] <= UInt<32>("hff00993") @[InstrMemory.scala 38:12]
    mem[7] <= UInt<32>("hff00a13") @[InstrMemory.scala 38:12]
    mem[8] <= UInt<32>("h1e00a93") @[InstrMemory.scala 38:12]
    mem[9] <= UInt<32>("h600b13") @[InstrMemory.scala 38:12]
    mem[10] <= UInt<32>("hb93") @[InstrMemory.scala 38:12]
    mem[11] <= UInt<32>("h10fb7") @[InstrMemory.scala 38:12]
    mem[12] <= UInt<32>("hffff8f93") @[InstrMemory.scala 38:12]
    mem[13] <= UInt<32>("h1f2a023") @[InstrMemory.scala 38:12]
    mem[14] <= UInt<32>("h638e33") @[InstrMemory.scala 38:12]
    mem[15] <= UInt<32>("h8e0023") @[InstrMemory.scala 38:12]
    mem[16] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[17] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[18] <= UInt<32>("h9e0023") @[InstrMemory.scala 38:12]
    mem[19] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[20] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[21] <= UInt<32>("h12e0023") @[InstrMemory.scala 38:12]
    mem[22] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[23] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[24] <= UInt<32>("h13e0023") @[InstrMemory.scala 38:12]
    mem[25] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[26] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[27] <= UInt<32>("h14e0023") @[InstrMemory.scala 38:12]
    mem[28] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[29] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[30] <= UInt<32>("h15e0023") @[InstrMemory.scala 38:12]
    mem[31] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[32] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[33] <= UInt<32>("h16e0023") @[InstrMemory.scala 38:12]
    mem[34] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[35] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[36] <= UInt<32>("h17e0023") @[InstrMemory.scala 38:12]
    mem[37] <= UInt<32>("h1e0e13") @[InstrMemory.scala 38:12]
    mem[38] <= UInt<32>("hfe7e13") @[InstrMemory.scala 38:12]
    mem[39] <= UInt<32>("h138393") @[InstrMemory.scala 38:12]
    mem[40] <= UInt<32>("hf3f393") @[InstrMemory.scala 38:12]
    mem[41] <= UInt<32>("he93") @[InstrMemory.scala 38:12]
    mem[42] <= UInt<32>("h100f13") @[InstrMemory.scala 38:12]
    mem[43] <= UInt<32>("h16f1f13") @[InstrMemory.scala 38:12]
    mem[44] <= UInt<32>("h1e8e93") @[InstrMemory.scala 38:12]
    mem[45] <= UInt<32>("hffeecee3") @[InstrMemory.scala 38:12]
    mem[46] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[47] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[48] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[49] <= UInt<32>("hf75ff06f") @[InstrMemory.scala 38:12]
    mem[50] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[51] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[52] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[53] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[54] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[55] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[56] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[57] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[58] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[59] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[60] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[61] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[62] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[63] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[64] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[65] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[66] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[67] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[68] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[69] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[70] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[71] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[72] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[73] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[74] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[75] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[76] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[77] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[78] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[79] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[80] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[81] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[82] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[83] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[84] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[85] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[86] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[87] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[88] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[89] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[90] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[91] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[92] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[93] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[94] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[95] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[96] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[97] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[98] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[99] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[100] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[101] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[102] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[103] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[104] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[105] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[106] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[107] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[108] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[109] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[110] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[111] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[112] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[113] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[114] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[115] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[116] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[117] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[118] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[119] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[120] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[121] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[122] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[123] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[124] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[125] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[126] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[127] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[128] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[129] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[130] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[131] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[132] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[133] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[134] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[135] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[136] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[137] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[138] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[139] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[140] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[141] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[142] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[143] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[144] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[145] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[146] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[147] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[148] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[149] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[150] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[151] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[152] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[153] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[154] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[155] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[156] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[157] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[158] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[159] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[160] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[161] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[162] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[163] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[164] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[165] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[166] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[167] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[168] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[169] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[170] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[171] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[172] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[173] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[174] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[175] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[176] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[177] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[178] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[179] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[180] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[181] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[182] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[183] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[184] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[185] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[186] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[187] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[188] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[189] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[190] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[191] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[192] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[193] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[194] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[195] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[196] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[197] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[198] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[199] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[200] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[201] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[202] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[203] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[204] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[205] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[206] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[207] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[208] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[209] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[210] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[211] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[212] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[213] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[214] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[215] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[216] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[217] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[218] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[219] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[220] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[221] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[222] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[223] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[224] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[225] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[226] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[227] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[228] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[229] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[230] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[231] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[232] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[233] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[234] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[235] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[236] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[237] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[238] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[239] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[240] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[241] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[242] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[243] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[244] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[245] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[246] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[247] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[248] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[249] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[250] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[251] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[252] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[253] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[254] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    mem[255] <= UInt<32>("h13") @[InstrMemory.scala 38:12]
    node _io_dataOut_T = bits(io.addr, 7, 0)
    reg io_dataOut_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_dataOut_REG) @[InstrMemory.scala 42:24]
    io_dataOut_REG <= mem[_io_dataOut_T] @[InstrMemory.scala 42:24]
    io.dataOut <= io_dataOut_REG @[InstrMemory.scala 42:14]

  module InstructionDecoder :
    input clock : Clock
    input reset : Reset
    output io : { flip instruction : UInt<32>, decoded_instruction_IFDtoEX : { rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, opcode : UInt<7>}, funct3 : UInt<3>, funct7 : UInt<7>, instrType : UInt<3>}

    io.decoded_instruction_IFDtoEX.rs1 <= UInt<1>("h0") @[InstructionDecoder.scala 22:38]
    io.decoded_instruction_IFDtoEX.rs2 <= UInt<1>("h0") @[InstructionDecoder.scala 23:38]
    io.decoded_instruction_IFDtoEX.rd <= UInt<1>("h0") @[InstructionDecoder.scala 24:37]
    io.funct3 <= UInt<1>("h0") @[InstructionDecoder.scala 25:13]
    io.funct7 <= UInt<1>("h0") @[InstructionDecoder.scala 26:13]
    io.instrType <= UInt<1>("h0") @[InstructionDecoder.scala 27:16]
    node _io_decoded_instruction_IFDtoEX_opcode_T = bits(io.instruction, 6, 0) @[InstructionDecoder.scala 28:58]
    io.decoded_instruction_IFDtoEX.opcode <= _io_decoded_instruction_IFDtoEX_opcode_T @[InstructionDecoder.scala 28:41]
    node _T = eq(UInt<6>("h33"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
    when _T : @[InstructionDecoder.scala 30:49]
      io.instrType <= UInt<1>("h0") @[InstructionDecoder.scala 32:20]
    else :
      node _T_1 = eq(UInt<5>("h13"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
      when _T_1 : @[InstructionDecoder.scala 30:49]
        io.instrType <= UInt<1>("h1") @[InstructionDecoder.scala 35:20]
      else :
        node _T_2 = eq(UInt<2>("h3"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
        when _T_2 : @[InstructionDecoder.scala 30:49]
          io.instrType <= UInt<1>("h1") @[InstructionDecoder.scala 38:20]
        else :
          node _T_3 = eq(UInt<6>("h23"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
          when _T_3 : @[InstructionDecoder.scala 30:49]
            io.instrType <= UInt<2>("h2") @[InstructionDecoder.scala 41:20]
          else :
            node _T_4 = eq(UInt<7>("h63"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
            when _T_4 : @[InstructionDecoder.scala 30:49]
              io.instrType <= UInt<2>("h3") @[InstructionDecoder.scala 44:20]
            else :
              node _T_5 = eq(UInt<7>("h6f"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
              when _T_5 : @[InstructionDecoder.scala 30:49]
                io.instrType <= UInt<3>("h5") @[InstructionDecoder.scala 47:20]
              else :
                node _T_6 = eq(UInt<7>("h67"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
                when _T_6 : @[InstructionDecoder.scala 30:49]
                  io.instrType <= UInt<1>("h1") @[InstructionDecoder.scala 50:20]
                else :
                  node _T_7 = eq(UInt<5>("h17"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
                  when _T_7 : @[InstructionDecoder.scala 30:49]
                    io.instrType <= UInt<3>("h4") @[InstructionDecoder.scala 53:20]
                  else :
                    node _T_8 = eq(UInt<6>("h37"), io.decoded_instruction_IFDtoEX.opcode) @[InstructionDecoder.scala 30:49]
                    when _T_8 : @[InstructionDecoder.scala 30:49]
                      io.instrType <= UInt<3>("h4") @[InstructionDecoder.scala 56:20]
    node _T_9 = eq(UInt<1>("h0"), io.instrType) @[InstructionDecoder.scala 60:24]
    when _T_9 : @[InstructionDecoder.scala 60:24]
      node _io_decoded_instruction_IFDtoEX_rs1_T = bits(io.instruction, 19, 15) @[InstructionDecoder.scala 62:59]
      io.decoded_instruction_IFDtoEX.rs1 <= _io_decoded_instruction_IFDtoEX_rs1_T @[InstructionDecoder.scala 62:42]
      node _io_decoded_instruction_IFDtoEX_rs2_T = bits(io.instruction, 24, 20) @[InstructionDecoder.scala 63:59]
      io.decoded_instruction_IFDtoEX.rs2 <= _io_decoded_instruction_IFDtoEX_rs2_T @[InstructionDecoder.scala 63:42]
      node _io_decoded_instruction_IFDtoEX_rd_T = bits(io.instruction, 11, 7) @[InstructionDecoder.scala 64:58]
      io.decoded_instruction_IFDtoEX.rd <= _io_decoded_instruction_IFDtoEX_rd_T @[InstructionDecoder.scala 64:41]
      node _io_funct3_T = bits(io.instruction, 14, 12) @[InstructionDecoder.scala 65:34]
      io.funct3 <= _io_funct3_T @[InstructionDecoder.scala 65:17]
      node _io_funct7_T = bits(io.instruction, 31, 25) @[InstructionDecoder.scala 66:34]
      io.funct7 <= _io_funct7_T @[InstructionDecoder.scala 66:17]
    else :
      node _T_10 = eq(UInt<1>("h1"), io.instrType) @[InstructionDecoder.scala 60:24]
      when _T_10 : @[InstructionDecoder.scala 60:24]
        node _io_decoded_instruction_IFDtoEX_rs1_T_1 = bits(io.instruction, 19, 15) @[InstructionDecoder.scala 69:59]
        io.decoded_instruction_IFDtoEX.rs1 <= _io_decoded_instruction_IFDtoEX_rs1_T_1 @[InstructionDecoder.scala 69:42]
        node _io_funct3_T_1 = bits(io.instruction, 14, 12) @[InstructionDecoder.scala 70:34]
        io.funct3 <= _io_funct3_T_1 @[InstructionDecoder.scala 70:17]
        node _io_decoded_instruction_IFDtoEX_rd_T_1 = bits(io.instruction, 11, 7) @[InstructionDecoder.scala 71:58]
        io.decoded_instruction_IFDtoEX.rd <= _io_decoded_instruction_IFDtoEX_rd_T_1 @[InstructionDecoder.scala 71:41]
        node _T_11 = eq(io.funct3, UInt<1>("h1")) @[InstructionDecoder.scala 72:22]
        node _T_12 = eq(io.funct3, UInt<3>("h5")) @[InstructionDecoder.scala 72:55]
        node _T_13 = or(_T_11, _T_12) @[InstructionDecoder.scala 72:42]
        node _T_14 = eq(io.funct3, UInt<3>("h5")) @[InstructionDecoder.scala 72:88]
        node _T_15 = or(_T_13, _T_14) @[InstructionDecoder.scala 72:75]
        when _T_15 : @[InstructionDecoder.scala 72:108]
          node _io_funct7_T_1 = bits(io.instruction, 31, 25) @[InstructionDecoder.scala 74:36]
          io.funct7 <= _io_funct7_T_1 @[InstructionDecoder.scala 74:19]
      else :
        node _T_16 = eq(UInt<2>("h2"), io.instrType) @[InstructionDecoder.scala 60:24]
        when _T_16 : @[InstructionDecoder.scala 60:24]
          node _io_decoded_instruction_IFDtoEX_rs1_T_2 = bits(io.instruction, 19, 15) @[InstructionDecoder.scala 78:59]
          io.decoded_instruction_IFDtoEX.rs1 <= _io_decoded_instruction_IFDtoEX_rs1_T_2 @[InstructionDecoder.scala 78:42]
          node _io_decoded_instruction_IFDtoEX_rs2_T_1 = bits(io.instruction, 24, 20) @[InstructionDecoder.scala 79:59]
          io.decoded_instruction_IFDtoEX.rs2 <= _io_decoded_instruction_IFDtoEX_rs2_T_1 @[InstructionDecoder.scala 79:42]
          node _io_funct3_T_2 = bits(io.instruction, 14, 12) @[InstructionDecoder.scala 80:34]
          io.funct3 <= _io_funct3_T_2 @[InstructionDecoder.scala 80:17]
        else :
          node _T_17 = eq(UInt<2>("h3"), io.instrType) @[InstructionDecoder.scala 60:24]
          when _T_17 : @[InstructionDecoder.scala 60:24]
            node _io_decoded_instruction_IFDtoEX_rs1_T_3 = bits(io.instruction, 19, 15) @[InstructionDecoder.scala 83:59]
            io.decoded_instruction_IFDtoEX.rs1 <= _io_decoded_instruction_IFDtoEX_rs1_T_3 @[InstructionDecoder.scala 83:42]
            node _io_decoded_instruction_IFDtoEX_rs2_T_2 = bits(io.instruction, 24, 20) @[InstructionDecoder.scala 84:59]
            io.decoded_instruction_IFDtoEX.rs2 <= _io_decoded_instruction_IFDtoEX_rs2_T_2 @[InstructionDecoder.scala 84:42]
            node _io_funct3_T_3 = bits(io.instruction, 14, 12) @[InstructionDecoder.scala 85:34]
            io.funct3 <= _io_funct3_T_3 @[InstructionDecoder.scala 85:17]
          else :
            node _T_18 = eq(UInt<3>("h5"), io.instrType) @[InstructionDecoder.scala 60:24]
            when _T_18 : @[InstructionDecoder.scala 60:24]
              node _io_decoded_instruction_IFDtoEX_rd_T_2 = bits(io.instruction, 11, 7) @[InstructionDecoder.scala 88:58]
              io.decoded_instruction_IFDtoEX.rd <= _io_decoded_instruction_IFDtoEX_rd_T_2 @[InstructionDecoder.scala 88:41]
            else :
              node _T_19 = eq(UInt<3>("h4"), io.instrType) @[InstructionDecoder.scala 60:24]
              when _T_19 : @[InstructionDecoder.scala 60:24]
                node _io_decoded_instruction_IFDtoEX_rd_T_3 = bits(io.instruction, 11, 7) @[InstructionDecoder.scala 91:58]
                io.decoded_instruction_IFDtoEX.rd <= _io_decoded_instruction_IFDtoEX_rd_T_3 @[InstructionDecoder.scala 91:41]


  module ImmediateGenerator :
    input clock : Clock
    input reset : Reset
    output io : { flip instrType : UInt<3>, flip instruction : UInt<32>, immediate : UInt<32>}

    io.immediate <= UInt<32>("h0") @[ImmediateGenerator.scala 14:16]
    node _T = eq(UInt<1>("h0"), io.instrType) @[ImmediateGenerator.scala 16:23]
    when _T : @[ImmediateGenerator.scala 16:23]
      io.immediate <= UInt<32>("h0") @[ImmediateGenerator.scala 18:20]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.instrType) @[ImmediateGenerator.scala 16:23]
      when _T_1 : @[ImmediateGenerator.scala 16:23]
        node _io_immediate_T = bits(io.instruction, 31, 31) @[ImmediateGenerator.scala 21:50]
        node _io_immediate_T_1 = bits(_io_immediate_T, 0, 0) @[Bitwise.scala 77:15]
        node _io_immediate_T_2 = mux(_io_immediate_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 77:12]
        node _io_immediate_T_3 = bits(io.instruction, 31, 20) @[ImmediateGenerator.scala 21:71]
        node _io_immediate_T_4 = cat(_io_immediate_T_2, _io_immediate_T_3) @[Cat.scala 33:92]
        io.immediate <= _io_immediate_T_4 @[ImmediateGenerator.scala 21:20]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.instrType) @[ImmediateGenerator.scala 16:23]
        when _T_2 : @[ImmediateGenerator.scala 16:23]
          node _io_immediate_T_5 = bits(io.instruction, 31, 25) @[ImmediateGenerator.scala 24:41]
          node _io_immediate_T_6 = bits(io.instruction, 11, 7) @[ImmediateGenerator.scala 24:65]
          node _io_immediate_T_7 = cat(_io_immediate_T_5, _io_immediate_T_6) @[Cat.scala 33:92]
          io.immediate <= _io_immediate_T_7 @[ImmediateGenerator.scala 24:20]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.instrType) @[ImmediateGenerator.scala 16:23]
          when _T_3 : @[ImmediateGenerator.scala 16:23]
            node _io_immediate_T_8 = bits(io.instruction, 31, 31) @[ImmediateGenerator.scala 27:50]
            node _io_immediate_T_9 = bits(_io_immediate_T_8, 0, 0) @[Bitwise.scala 77:15]
            node _io_immediate_T_10 = mux(_io_immediate_T_9, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 77:12]
            node _io_immediate_T_11 = bits(io.instruction, 31, 31) @[ImmediateGenerator.scala 27:71]
            node _io_immediate_T_12 = bits(io.instruction, 7, 7) @[ImmediateGenerator.scala 27:91]
            node _io_immediate_T_13 = bits(io.instruction, 30, 25) @[ImmediateGenerator.scala 27:110]
            node _io_immediate_T_14 = bits(io.instruction, 11, 8) @[ImmediateGenerator.scala 27:134]
            node io_immediate_lo_hi = cat(_io_immediate_T_13, _io_immediate_T_14) @[Cat.scala 33:92]
            node io_immediate_lo = cat(io_immediate_lo_hi, UInt<1>("h0")) @[Cat.scala 33:92]
            node io_immediate_hi_hi = cat(_io_immediate_T_10, _io_immediate_T_11) @[Cat.scala 33:92]
            node io_immediate_hi = cat(io_immediate_hi_hi, _io_immediate_T_12) @[Cat.scala 33:92]
            node _io_immediate_T_15 = cat(io_immediate_hi, io_immediate_lo) @[Cat.scala 33:92]
            io.immediate <= _io_immediate_T_15 @[ImmediateGenerator.scala 27:20]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.instrType) @[ImmediateGenerator.scala 16:23]
            when _T_4 : @[ImmediateGenerator.scala 16:23]
              node _io_immediate_T_16 = bits(io.instruction, 31, 12) @[ImmediateGenerator.scala 30:41]
              node _io_immediate_T_17 = cat(_io_immediate_T_16, UInt<12>("h0")) @[Cat.scala 33:92]
              io.immediate <= _io_immediate_T_17 @[ImmediateGenerator.scala 30:20]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.instrType) @[ImmediateGenerator.scala 16:23]
              when _T_5 : @[ImmediateGenerator.scala 16:23]
                node _io_immediate_T_18 = bits(io.instruction, 31, 31) @[ImmediateGenerator.scala 33:41]
                node _io_immediate_T_19 = bits(io.instruction, 19, 12) @[ImmediateGenerator.scala 33:61]
                node _io_immediate_T_20 = bits(io.instruction, 20, 20) @[ImmediateGenerator.scala 33:85]
                node _io_immediate_T_21 = bits(io.instruction, 30, 21) @[ImmediateGenerator.scala 33:105]
                node io_immediate_lo_1 = cat(_io_immediate_T_21, UInt<1>("h0")) @[Cat.scala 33:92]
                node io_immediate_hi_hi_1 = cat(_io_immediate_T_18, _io_immediate_T_19) @[Cat.scala 33:92]
                node io_immediate_hi_1 = cat(io_immediate_hi_hi_1, _io_immediate_T_20) @[Cat.scala 33:92]
                node _io_immediate_T_22 = cat(io_immediate_hi_1, io_immediate_lo_1) @[Cat.scala 33:92]
                io.immediate <= _io_immediate_T_22 @[ImmediateGenerator.scala 33:20]


  module ControlUnit :
    input clock : Clock
    input reset : Reset
    output io : { flip funct3 : UInt<3>, flip funct7 : UInt<7>, flip opcode : UInt<7>, alu_op2mux_select : UInt<1>, alu_operation_select : UInt<8>, register_write_enable : UInt<1>, write_back_select : UInt<1>, MemReadEnable : UInt<1>, write_memory_enable : UInt<1>}

    io.write_memory_enable <= UInt<1>("h0") @[ControlUnit.scala 22:26]
    io.MemReadEnable <= UInt<1>("h0") @[ControlUnit.scala 23:20]
    io.register_write_enable <= UInt<1>("h0") @[ControlUnit.scala 24:28]
    io.write_back_select <= UInt<1>("h0") @[ControlUnit.scala 25:24]
    io.alu_operation_select <= UInt<1>("h0") @[ControlUnit.scala 26:27]
    io.alu_op2mux_select <= UInt<1>("h1") @[ControlUnit.scala 27:24]
    node _T = eq(UInt<6>("h33"), io.opcode) @[ControlUnit.scala 49:21]
    node _T_1 = eq(UInt<5>("h13"), io.opcode) @[ControlUnit.scala 49:21]
    node _T_2 = or(_T, _T_1) @[ControlUnit.scala 49:21]
    when _T_2 : @[ControlUnit.scala 49:21]
      io.register_write_enable <= UInt<1>("h1") @[ControlUnit.scala 51:32]
      node io_alu_operation_select_compositeKey = cat(io.funct3, io.funct7) @[Cat.scala 33:92]
      node _io_alu_operation_select_T = cat(UInt<3>("h0"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_1 = cat(UInt<3>("h0"), UInt<7>("h20")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_2 = cat(UInt<3>("h4"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_3 = cat(UInt<3>("h6"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_4 = cat(UInt<3>("h7"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_5 = cat(UInt<3>("h1"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_6 = cat(UInt<3>("h2"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_7 = cat(UInt<3>("h3"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_8 = cat(UInt<3>("h5"), UInt<7>("h0")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_9 = cat(UInt<3>("h5"), UInt<7>("h20")) @[Cat.scala 33:92]
      node _io_alu_operation_select_T_10 = eq(_io_alu_operation_select_T, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_11 = mux(_io_alu_operation_select_T_10, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_12 = eq(_io_alu_operation_select_T_1, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_13 = mux(_io_alu_operation_select_T_12, UInt<1>("h1"), _io_alu_operation_select_T_11) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_14 = eq(_io_alu_operation_select_T_2, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_15 = mux(_io_alu_operation_select_T_14, UInt<3>("h4"), _io_alu_operation_select_T_13) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_16 = eq(_io_alu_operation_select_T_3, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_17 = mux(_io_alu_operation_select_T_16, UInt<2>("h3"), _io_alu_operation_select_T_15) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_18 = eq(_io_alu_operation_select_T_4, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_19 = mux(_io_alu_operation_select_T_18, UInt<2>("h2"), _io_alu_operation_select_T_17) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_20 = eq(_io_alu_operation_select_T_5, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_21 = mux(_io_alu_operation_select_T_20, UInt<3>("h5"), _io_alu_operation_select_T_19) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_22 = eq(_io_alu_operation_select_T_6, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_23 = mux(_io_alu_operation_select_T_22, UInt<4>("h8"), _io_alu_operation_select_T_21) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_24 = eq(_io_alu_operation_select_T_7, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_25 = mux(_io_alu_operation_select_T_24, UInt<4>("h9"), _io_alu_operation_select_T_23) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_26 = eq(_io_alu_operation_select_T_8, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_27 = mux(_io_alu_operation_select_T_26, UInt<3>("h6"), _io_alu_operation_select_T_25) @[Mux.scala 81:58]
      node _io_alu_operation_select_T_28 = eq(_io_alu_operation_select_T_9, io_alu_operation_select_compositeKey) @[Mux.scala 81:61]
      node _io_alu_operation_select_T_29 = mux(_io_alu_operation_select_T_28, UInt<3>("h7"), _io_alu_operation_select_T_27) @[Mux.scala 81:58]
      io.alu_operation_select <= _io_alu_operation_select_T_29 @[ControlUnit.scala 52:31]
      node _io_alu_op2mux_select_T = eq(io.opcode, UInt<6>("h33")) @[ControlUnit.scala 53:45]
      node _io_alu_op2mux_select_T_1 = mux(_io_alu_op2mux_select_T, UInt<1>("h0"), UInt<1>("h1")) @[ControlUnit.scala 53:34]
      io.alu_op2mux_select <= _io_alu_op2mux_select_T_1 @[ControlUnit.scala 53:28]
    else :
      node _T_3 = eq(UInt<7>("h63"), io.opcode) @[ControlUnit.scala 49:21]
      when _T_3 : @[ControlUnit.scala 49:21]
        io.register_write_enable <= UInt<1>("h0") @[ControlUnit.scala 57:32]
        io.alu_op2mux_select <= UInt<1>("h0") @[ControlUnit.scala 58:28]
        node _io_alu_operation_select_T_30 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
        node _io_alu_operation_select_T_31 = mux(_io_alu_operation_select_T_30, UInt<4>("ha"), UInt<1>("h0")) @[Mux.scala 81:58]
        node _io_alu_operation_select_T_32 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
        node _io_alu_operation_select_T_33 = mux(_io_alu_operation_select_T_32, UInt<4>("hb"), _io_alu_operation_select_T_31) @[Mux.scala 81:58]
        node _io_alu_operation_select_T_34 = eq(UInt<3>("h4"), io.funct3) @[Mux.scala 81:61]
        node _io_alu_operation_select_T_35 = mux(_io_alu_operation_select_T_34, UInt<4>("hc"), _io_alu_operation_select_T_33) @[Mux.scala 81:58]
        node _io_alu_operation_select_T_36 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
        node _io_alu_operation_select_T_37 = mux(_io_alu_operation_select_T_36, UInt<4>("hd"), _io_alu_operation_select_T_35) @[Mux.scala 81:58]
        node _io_alu_operation_select_T_38 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
        node _io_alu_operation_select_T_39 = mux(_io_alu_operation_select_T_38, UInt<4>("he"), _io_alu_operation_select_T_37) @[Mux.scala 81:58]
        node _io_alu_operation_select_T_40 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
        node _io_alu_operation_select_T_41 = mux(_io_alu_operation_select_T_40, UInt<4>("hf"), _io_alu_operation_select_T_39) @[Mux.scala 81:58]
        io.alu_operation_select <= _io_alu_operation_select_T_41 @[ControlUnit.scala 59:31]
      else :
        node _T_4 = eq(UInt<2>("h3"), io.opcode) @[ControlUnit.scala 49:21]
        when _T_4 : @[ControlUnit.scala 49:21]
          reg io_register_write_enable_REG : UInt<1>, clock with :
            reset => (UInt<1>("h0"), io_register_write_enable_REG) @[ControlUnit.scala 70:42]
          io_register_write_enable_REG <= UInt<1>("h1") @[ControlUnit.scala 70:42]
          io.register_write_enable <= io_register_write_enable_REG @[ControlUnit.scala 70:32]
          reg io_write_back_select_REG : UInt<1>, clock with :
            reset => (UInt<1>("h0"), io_write_back_select_REG) @[ControlUnit.scala 71:38]
          io_write_back_select_REG <= UInt<1>("h1") @[ControlUnit.scala 71:38]
          io.write_back_select <= io_write_back_select_REG @[ControlUnit.scala 71:28]
          node _io_alu_operation_select_T_42 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
          node _io_alu_operation_select_T_43 = mux(_io_alu_operation_select_T_42, UInt<5>("h10"), UInt<1>("h0")) @[Mux.scala 81:58]
          node _io_alu_operation_select_T_44 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
          node _io_alu_operation_select_T_45 = mux(_io_alu_operation_select_T_44, UInt<5>("h11"), _io_alu_operation_select_T_43) @[Mux.scala 81:58]
          node _io_alu_operation_select_T_46 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
          node _io_alu_operation_select_T_47 = mux(_io_alu_operation_select_T_46, UInt<5>("h12"), _io_alu_operation_select_T_45) @[Mux.scala 81:58]
          node _io_alu_operation_select_T_48 = eq(UInt<3>("h4"), io.funct3) @[Mux.scala 81:61]
          node _io_alu_operation_select_T_49 = mux(_io_alu_operation_select_T_48, UInt<5>("h13"), _io_alu_operation_select_T_47) @[Mux.scala 81:58]
          node _io_alu_operation_select_T_50 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
          node _io_alu_operation_select_T_51 = mux(_io_alu_operation_select_T_50, UInt<5>("h14"), _io_alu_operation_select_T_49) @[Mux.scala 81:58]
          io.alu_operation_select <= _io_alu_operation_select_T_51 @[ControlUnit.scala 72:31]
        else :
          node _T_5 = eq(UInt<6>("h23"), io.opcode) @[ControlUnit.scala 49:21]
          when _T_5 : @[ControlUnit.scala 49:21]
            io.write_memory_enable <= UInt<1>("h1") @[ControlUnit.scala 82:30]
            io.register_write_enable <= UInt<1>("h0") @[ControlUnit.scala 83:32]
            node _io_alu_operation_select_T_52 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
            node _io_alu_operation_select_T_53 = mux(_io_alu_operation_select_T_52, UInt<5>("h15"), UInt<1>("h0")) @[Mux.scala 81:58]
            node _io_alu_operation_select_T_54 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
            node _io_alu_operation_select_T_55 = mux(_io_alu_operation_select_T_54, UInt<5>("h16"), _io_alu_operation_select_T_53) @[Mux.scala 81:58]
            node _io_alu_operation_select_T_56 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
            node _io_alu_operation_select_T_57 = mux(_io_alu_operation_select_T_56, UInt<5>("h17"), _io_alu_operation_select_T_55) @[Mux.scala 81:58]
            io.alu_operation_select <= _io_alu_operation_select_T_57 @[ControlUnit.scala 84:31]
          else :
            node _T_6 = eq(UInt<6>("h37"), io.opcode) @[ControlUnit.scala 49:21]
            when _T_6 : @[ControlUnit.scala 49:21]
              io.register_write_enable <= UInt<1>("h1") @[ControlUnit.scala 91:32]
            else :
              node _T_7 = eq(UInt<5>("h17"), io.opcode) @[ControlUnit.scala 49:21]
              when _T_7 : @[ControlUnit.scala 49:21]
                io.register_write_enable <= UInt<1>("h1") @[ControlUnit.scala 94:32]
              else :
                node _T_8 = eq(UInt<7>("h6f"), io.opcode) @[ControlUnit.scala 49:21]
                when _T_8 : @[ControlUnit.scala 49:21]
                  io.register_write_enable <= UInt<1>("h1") @[ControlUnit.scala 97:32]
                  io.alu_operation_select <= UInt<7>("h6f") @[ControlUnit.scala 98:31]
                else :
                  node _T_9 = eq(UInt<7>("h67"), io.opcode) @[ControlUnit.scala 49:21]
                  when _T_9 : @[ControlUnit.scala 49:21]
                    io.register_write_enable <= UInt<1>("h1") @[ControlUnit.scala 101:32]
                    io.alu_operation_select <= UInt<7>("h67") @[ControlUnit.scala 102:31]


  module IFDStage :
    input clock : Clock
    input reset : Reset
    output io : { EXtoIFD : { flip take_branch_EXtoIFD : UInt<1>, flip branch_address_EXtoIFD : UInt<32>}, decoded_instruction_IFDtoEX : { rs1 : UInt<5>, rs2 : UInt<5>, rd : UInt<5>, opcode : UInt<7>}, IFDtoEX : { pc_IFDtoEX : UInt<32>, immediate_IFDtoEX : UInt<32>, alu_op2mux_select_IFDtoEX : UInt<1>, alu_operation_select_IFDtoEX : UInt<8>, register_write_enable_IFDtoEX : UInt<1>, write_back_select_IFDtoEX : UInt<1>, MemReadEnable_IFDtoEX : UInt<1>, write_memory_enable_IFDtoEX : UInt<1>}}

    reg PC : UInt<32>, clock with :
      reset => (reset, UInt<32>("hfffffffc")) @[IFDStage.scala 39:19]
    node _NextInstrAdd_T = add(PC, UInt<3>("h4")) @[IFDStage.scala 40:108]
    node _NextInstrAdd_T_1 = tail(_NextInstrAdd_T, 1) @[IFDStage.scala 40:108]
    node _NextInstrAdd_T_2 = mux(io.EXtoIFD.take_branch_EXtoIFD, io.EXtoIFD.branch_address_EXtoIFD, _NextInstrAdd_T_1) @[IFDStage.scala 40:37]
    wire NextInstrAdd : UInt @[IFDStage.scala 40:33]
    NextInstrAdd <= _NextInstrAdd_T_2 @[IFDStage.scala 40:33]
    PC <= NextInstrAdd @[IFDStage.scala 41:6]
    inst instrMem of InstrMemory @[IFDStage.scala 44:24]
    instrMem.clock <= clock
    instrMem.reset <= reset
    node _instrMem_io_addr_T = dshr(NextInstrAdd, UInt<2>("h2")) @[IFDStage.scala 45:36]
    instrMem.io.addr <= _instrMem_io_addr_T @[IFDStage.scala 45:20]
    inst instructionDecoder of InstructionDecoder @[IFDStage.scala 48:34]
    instructionDecoder.clock <= clock
    instructionDecoder.reset <= reset
    instructionDecoder.io.instruction <= instrMem.io.dataOut @[IFDStage.scala 49:37]
    inst immediateGenerator of ImmediateGenerator @[IFDStage.scala 52:34]
    immediateGenerator.clock <= clock
    immediateGenerator.reset <= reset
    immediateGenerator.io.instruction <= instrMem.io.dataOut @[IFDStage.scala 53:37]
    immediateGenerator.io.instrType <= instructionDecoder.io.instrType @[IFDStage.scala 54:35]
    inst controlUnit of ControlUnit @[IFDStage.scala 57:27]
    controlUnit.clock <= clock
    controlUnit.reset <= reset
    controlUnit.io.funct3 <= instructionDecoder.io.funct3 @[IFDStage.scala 58:25]
    controlUnit.io.funct7 <= instructionDecoder.io.funct7 @[IFDStage.scala 59:25]
    controlUnit.io.opcode <= instructionDecoder.io.decoded_instruction_IFDtoEX.opcode @[IFDStage.scala 60:25]
    io.IFDtoEX.write_back_select_IFDtoEX <= controlUnit.io.write_back_select @[IFDStage.scala 61:40]
    io.IFDtoEX.write_memory_enable_IFDtoEX <= controlUnit.io.write_memory_enable @[IFDStage.scala 62:42]
    io.IFDtoEX.alu_operation_select_IFDtoEX <= controlUnit.io.alu_operation_select @[IFDStage.scala 63:43]
    io.IFDtoEX.alu_op2mux_select_IFDtoEX <= controlUnit.io.alu_op2mux_select @[IFDStage.scala 64:40]
    io.IFDtoEX.MemReadEnable_IFDtoEX <= controlUnit.io.MemReadEnable @[IFDStage.scala 65:36]
    io.IFDtoEX.register_write_enable_IFDtoEX <= controlUnit.io.register_write_enable @[IFDStage.scala 66:44]
    reg io_IFDtoEX_pc_IFDtoEX_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_IFDtoEX_pc_IFDtoEX_REG) @[IFDStage.scala 69:35]
    io_IFDtoEX_pc_IFDtoEX_REG <= NextInstrAdd @[IFDStage.scala 69:35]
    io.IFDtoEX.pc_IFDtoEX <= io_IFDtoEX_pc_IFDtoEX_REG @[IFDStage.scala 69:25]
    io.decoded_instruction_IFDtoEX <= instructionDecoder.io.decoded_instruction_IFDtoEX @[IFDStage.scala 73:34]
    io.IFDtoEX.immediate_IFDtoEX <= immediateGenerator.io.immediate @[IFDStage.scala 75:32]

  module RegisterFile :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip regfile_write_data_WBtoEX : UInt<32>, flip rd_WBtoEX : UInt<5>, flip regfile_write_enable_WBtoEX : UInt<1>, alu_operand_1 : UInt<32>, reg_data_2 : UInt<32>}

    wire _RegFile_WIRE : UInt<32>[32] @[RegisterFile.scala 19:35]
    _RegFile_WIRE[0] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[1] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[2] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[3] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[4] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[5] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[6] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[7] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[8] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[9] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[10] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[11] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[12] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[13] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[14] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[15] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[16] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[17] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[18] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[19] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[20] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[21] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[22] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[23] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[24] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[25] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[26] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[27] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[28] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[29] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[30] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    _RegFile_WIRE[31] <= UInt<32>("h0") @[RegisterFile.scala 19:35]
    reg RegFile : UInt<32>[32], clock with :
      reset => (reset, _RegFile_WIRE) @[RegisterFile.scala 19:25]
    io.alu_operand_1 <= UInt<1>("h0") @[RegisterFile.scala 22:20]
    io.reg_data_2 <= UInt<1>("h0") @[RegisterFile.scala 23:17]
    node _T = eq(io.regfile_write_enable_WBtoEX, UInt<1>("h1")) @[RegisterFile.scala 25:40]
    when _T : @[RegisterFile.scala 25:49]
      RegFile[io.rd_WBtoEX] <= io.regfile_write_data_WBtoEX @[RegisterFile.scala 26:27]
      node _T_1 = eq(io.rd_WBtoEX, UInt<1>("h0")) @[RegisterFile.scala 27:23]
      when _T_1 : @[RegisterFile.scala 27:31]
        RegFile[io.rd_WBtoEX] <= UInt<1>("h0") @[RegisterFile.scala 28:29]
    else :
      RegFile[io.rd_WBtoEX] <= RegFile[io.rd_WBtoEX] @[RegisterFile.scala 31:27]
      node _T_2 = eq(io.rd_WBtoEX, UInt<1>("h0")) @[RegisterFile.scala 32:23]
      when _T_2 : @[RegisterFile.scala 32:32]
        RegFile[io.rd_WBtoEX] <= UInt<1>("h0") @[RegisterFile.scala 33:29]
    reg io_alu_operand_1_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_alu_operand_1_REG) @[RegisterFile.scala 37:30]
    io_alu_operand_1_REG <= RegFile[io.rs1] @[RegisterFile.scala 37:30]
    io.alu_operand_1 <= io_alu_operand_1_REG @[RegisterFile.scala 37:20]
    reg io_reg_data_2_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_reg_data_2_REG) @[RegisterFile.scala 38:27]
    io_reg_data_2_REG <= RegFile[io.rs2] @[RegisterFile.scala 38:27]
    io.reg_data_2 <= io_reg_data_2_REG @[RegisterFile.scala 38:17]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip alu_operation_select : UInt<8>, flip alu_operand_1 : UInt<32>, flip alu_operand_2 : UInt<32>, alu_result : UInt<32>, take_branch_EXtoMEM : UInt<1>}

    node signedOperand1 = asSInt(io.alu_operand_1) @[ALU.scala 17:41]
    node signedOperand2 = asSInt(io.alu_operand_2) @[ALU.scala 18:41]
    io.alu_result <= UInt<6>("h2a") @[ALU.scala 21:17]
    io.take_branch_EXtoMEM <= UInt<1>("h0") @[ALU.scala 22:26]
    node _T = eq(UInt<1>("h0"), io.alu_operation_select) @[ALU.scala 23:35]
    when _T : @[ALU.scala 23:35]
      node _io_alu_result_T = add(signedOperand1, signedOperand2) @[ALU.scala 25:40]
      node _io_alu_result_T_1 = tail(_io_alu_result_T, 1) @[ALU.scala 25:40]
      node _io_alu_result_T_2 = asSInt(_io_alu_result_T_1) @[ALU.scala 25:40]
      node _io_alu_result_T_3 = asUInt(_io_alu_result_T_2) @[ALU.scala 25:58]
      io.alu_result <= _io_alu_result_T_3 @[ALU.scala 25:21]
    else :
      node _T_1 = eq(UInt<1>("h1"), io.alu_operation_select) @[ALU.scala 23:35]
      when _T_1 : @[ALU.scala 23:35]
        node _io_alu_result_T_4 = sub(signedOperand1, signedOperand2) @[ALU.scala 28:40]
        node _io_alu_result_T_5 = tail(_io_alu_result_T_4, 1) @[ALU.scala 28:40]
        node _io_alu_result_T_6 = asSInt(_io_alu_result_T_5) @[ALU.scala 28:40]
        node _io_alu_result_T_7 = asUInt(_io_alu_result_T_6) @[ALU.scala 28:58]
        io.alu_result <= _io_alu_result_T_7 @[ALU.scala 28:21]
      else :
        node _T_2 = eq(UInt<2>("h2"), io.alu_operation_select) @[ALU.scala 23:35]
        when _T_2 : @[ALU.scala 23:35]
          node _io_alu_result_T_8 = and(signedOperand1, signedOperand2) @[ALU.scala 31:40]
          node _io_alu_result_T_9 = asSInt(_io_alu_result_T_8) @[ALU.scala 31:40]
          node _io_alu_result_T_10 = asUInt(_io_alu_result_T_9) @[ALU.scala 31:58]
          io.alu_result <= _io_alu_result_T_10 @[ALU.scala 31:21]
        else :
          node _T_3 = eq(UInt<2>("h3"), io.alu_operation_select) @[ALU.scala 23:35]
          when _T_3 : @[ALU.scala 23:35]
            node _io_alu_result_T_11 = or(signedOperand1, signedOperand2) @[ALU.scala 34:40]
            node _io_alu_result_T_12 = asSInt(_io_alu_result_T_11) @[ALU.scala 34:40]
            node _io_alu_result_T_13 = asUInt(_io_alu_result_T_12) @[ALU.scala 34:58]
            io.alu_result <= _io_alu_result_T_13 @[ALU.scala 34:21]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.alu_operation_select) @[ALU.scala 23:35]
            when _T_4 : @[ALU.scala 23:35]
              node _io_alu_result_T_14 = xor(signedOperand1, signedOperand2) @[ALU.scala 37:40]
              node _io_alu_result_T_15 = asSInt(_io_alu_result_T_14) @[ALU.scala 37:40]
              node _io_alu_result_T_16 = asUInt(_io_alu_result_T_15) @[ALU.scala 37:58]
              io.alu_result <= _io_alu_result_T_16 @[ALU.scala 37:21]
            else :
              node _T_5 = eq(UInt<3>("h5"), io.alu_operation_select) @[ALU.scala 23:35]
              when _T_5 : @[ALU.scala 23:35]
                node _io_alu_result_T_17 = bits(io.alu_operand_2, 4, 0) @[ALU.scala 40:61]
                node _io_alu_result_T_18 = dshl(io.alu_operand_1, _io_alu_result_T_17) @[ALU.scala 40:42]
                io.alu_result <= _io_alu_result_T_18 @[ALU.scala 40:21]
              else :
                node _T_6 = eq(UInt<3>("h6"), io.alu_operation_select) @[ALU.scala 23:35]
                when _T_6 : @[ALU.scala 23:35]
                  node _io_alu_result_T_19 = bits(io.alu_operand_2, 4, 0) @[ALU.scala 43:61]
                  node _io_alu_result_T_20 = dshr(io.alu_operand_1, _io_alu_result_T_19) @[ALU.scala 43:42]
                  io.alu_result <= _io_alu_result_T_20 @[ALU.scala 43:21]
                else :
                  node _T_7 = eq(UInt<3>("h7"), io.alu_operation_select) @[ALU.scala 23:35]
                  when _T_7 : @[ALU.scala 23:35]
                    node _io_alu_result_T_21 = bits(signedOperand2, 4, 0) @[ALU.scala 47:58]
                    node _io_alu_result_T_22 = dshr(signedOperand1, _io_alu_result_T_21) @[ALU.scala 47:40]
                    node _io_alu_result_T_23 = asUInt(_io_alu_result_T_22) @[ALU.scala 47:66]
                    io.alu_result <= _io_alu_result_T_23 @[ALU.scala 47:21]
                  else :
                    node _T_8 = eq(UInt<4>("h8"), io.alu_operation_select) @[ALU.scala 23:35]
                    when _T_8 : @[ALU.scala 23:35]
                      node _T_9 = lt(signedOperand1, signedOperand2) @[ALU.scala 50:27]
                      when _T_9 : @[ALU.scala 50:44]
                        io.alu_result <= UInt<1>("h1") @[ALU.scala 51:23]
                      else :
                        io.alu_result <= UInt<1>("h0") @[ALU.scala 53:23]
                    else :
                      node _T_10 = eq(UInt<4>("h9"), io.alu_operation_select) @[ALU.scala 23:35]
                      when _T_10 : @[ALU.scala 23:35]
                        node _T_11 = lt(io.alu_operand_1, io.alu_operand_2) @[ALU.scala 57:29]
                        when _T_11 : @[ALU.scala 57:49]
                          io.alu_result <= UInt<1>("h1") @[ALU.scala 58:23]
                        else :
                          io.alu_result <= UInt<1>("h0") @[ALU.scala 60:23]
                      else :
                        node _T_12 = eq(UInt<4>("ha"), io.alu_operation_select) @[ALU.scala 23:35]
                        when _T_12 : @[ALU.scala 23:35]
                          node _T_13 = eq(signedOperand1, signedOperand2) @[ALU.scala 65:27]
                          when _T_13 : @[ALU.scala 65:46]
                            io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 66:32]
                        else :
                          node _T_14 = eq(UInt<4>("hb"), io.alu_operation_select) @[ALU.scala 23:35]
                          when _T_14 : @[ALU.scala 23:35]
                            node _T_15 = neq(signedOperand1, signedOperand2) @[ALU.scala 70:27]
                            when _T_15 : @[ALU.scala 70:46]
                              io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 71:32]
                          else :
                            node _T_16 = eq(UInt<4>("hc"), io.alu_operation_select) @[ALU.scala 23:35]
                            when _T_16 : @[ALU.scala 23:35]
                              node _T_17 = lt(signedOperand1, signedOperand2) @[ALU.scala 75:27]
                              when _T_17 : @[ALU.scala 75:44]
                                io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 76:32]
                            else :
                              node _T_18 = eq(UInt<4>("hd"), io.alu_operation_select) @[ALU.scala 23:35]
                              when _T_18 : @[ALU.scala 23:35]
                                node _T_19 = geq(signedOperand1, signedOperand2) @[ALU.scala 80:27]
                                when _T_19 : @[ALU.scala 80:45]
                                  io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 81:32]
                              else :
                                node _T_20 = eq(UInt<4>("he"), io.alu_operation_select) @[ALU.scala 23:35]
                                when _T_20 : @[ALU.scala 23:35]
                                  node _T_21 = lt(io.alu_operand_1, io.alu_operand_2) @[ALU.scala 85:29]
                                  when _T_21 : @[ALU.scala 85:48]
                                    io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 86:32]
                                else :
                                  node _T_22 = eq(UInt<4>("hf"), io.alu_operation_select) @[ALU.scala 23:35]
                                  when _T_22 : @[ALU.scala 23:35]
                                    node _T_23 = geq(io.alu_operand_1, io.alu_operand_2) @[ALU.scala 90:29]
                                    when _T_23 : @[ALU.scala 90:49]
                                      io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 91:32]
                                  else :
                                    node _T_24 = eq(UInt<5>("h10"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_25 = eq(UInt<5>("h13"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_26 = eq(UInt<5>("h12"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_27 = eq(UInt<5>("h11"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_28 = eq(UInt<5>("h14"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_29 = eq(UInt<5>("h15"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_30 = eq(UInt<5>("h16"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_31 = eq(UInt<5>("h17"), io.alu_operation_select) @[ALU.scala 23:35]
                                    node _T_32 = or(_T_24, _T_25) @[ALU.scala 23:35]
                                    node _T_33 = or(_T_32, _T_26) @[ALU.scala 23:35]
                                    node _T_34 = or(_T_33, _T_27) @[ALU.scala 23:35]
                                    node _T_35 = or(_T_34, _T_28) @[ALU.scala 23:35]
                                    node _T_36 = or(_T_35, _T_29) @[ALU.scala 23:35]
                                    node _T_37 = or(_T_36, _T_30) @[ALU.scala 23:35]
                                    node _T_38 = or(_T_37, _T_31) @[ALU.scala 23:35]
                                    when _T_38 : @[ALU.scala 23:35]
                                      node _io_alu_result_T_24 = add(io.alu_operand_1, io.alu_operand_2) @[ALU.scala 96:41]
                                      node _io_alu_result_T_25 = tail(_io_alu_result_T_24, 1) @[ALU.scala 96:41]
                                      io.alu_result <= _io_alu_result_T_25 @[ALU.scala 96:21]
                                    else :
                                      node _T_39 = eq(UInt<7>("h6f"), io.alu_operation_select) @[ALU.scala 23:35]
                                      node _T_40 = eq(UInt<7>("h67"), io.alu_operation_select) @[ALU.scala 23:35]
                                      node _T_41 = or(_T_39, _T_40) @[ALU.scala 23:35]
                                      when _T_41 : @[ALU.scala 23:35]
                                        io.take_branch_EXtoMEM <= UInt<1>("h1") @[ALU.scala 99:30]


  module EXStage :
    input clock : Clock
    input reset : Reset
    output io : { decoded_instruction_IFDtoEX : { flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip opcode : UInt<7>}, IFDtoEX : { flip pc_IFDtoEX : UInt<32>, flip immediate_IFDtoEX : UInt<32>, flip alu_op2mux_select_IFDtoEX : UInt<1>, flip alu_operation_select_IFDtoEX : UInt<8>, flip register_write_enable_IFDtoEX : UInt<1>, flip write_back_select_IFDtoEX : UInt<1>, flip MemReadEnable_IFDtoEX : UInt<1>, flip write_memory_enable_IFDtoEX : UInt<1>}, WBtoEX : { flip regfile_write_data_WBtoEX : UInt<32>, flip regfile_write_enable_WBtoEX : UInt<1>, flip rd_WBtoEX : UInt<5>}, EXtoMEM : { alu_result_EXtoMEM : UInt<32>, memory_write_data_EXtoMEM : UInt<32>, rd_EXtoMEM : UInt<5>, register_write_enable_EXtoMEM : UInt<1>, write_back_select_EXtoMEM : UInt<1>, data_memory_write_enable_EXtoMEM : UInt<1>, io_memory_write_enable_EXtoMEM : UInt<1>, address_is_io_EXtoMEM : UInt<1>, alu_operation_select_EXtoMEM : UInt<8>}, EXtoIFD : { branch_address_EXtoIFD : UInt<32>, take_branch_EXtoIFD : UInt<1>}}

    inst RegFile of RegisterFile @[EXStage.scala 54:23]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst ALU of ALU @[EXStage.scala 57:19]
    ALU.clock <= clock
    ALU.reset <= reset
    reg immediateReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 60:29]
    immediateReg <= io.IFDtoEX.immediate_IFDtoEX @[EXStage.scala 60:29]
    reg opcodeReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 63:26]
    opcodeReg <= io.decoded_instruction_IFDtoEX.opcode @[EXStage.scala 63:26]
    reg rdReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 64:22]
    rdReg <= io.decoded_instruction_IFDtoEX.rd @[EXStage.scala 64:22]
    reg branchAddrReg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 65:30]
    branchAddrReg <= io.IFDtoEX.pc_IFDtoEX @[EXStage.scala 65:30]
    reg alu_operation_Reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 66:34]
    alu_operation_Reg <= io.IFDtoEX.alu_operation_select_IFDtoEX @[EXStage.scala 66:34]
    reg register_write_Reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 67:35]
    register_write_Reg <= io.IFDtoEX.register_write_enable_IFDtoEX @[EXStage.scala 67:35]
    reg write_back_Reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 68:31]
    write_back_Reg <= io.IFDtoEX.write_back_select_IFDtoEX @[EXStage.scala 68:31]
    reg write_memory_Reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 69:33]
    write_memory_Reg <= io.IFDtoEX.write_memory_enable_IFDtoEX @[EXStage.scala 69:33]
    reg alu_op2mux_Reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[EXStage.scala 70:31]
    alu_op2mux_Reg <= io.IFDtoEX.alu_op2mux_select_IFDtoEX @[EXStage.scala 70:31]
    io.EXtoMEM.alu_result_EXtoMEM <= UInt<32>("h0") @[EXStage.scala 72:33]
    io.EXtoMEM.memory_write_data_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 73:40]
    io.EXtoMEM.rd_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 74:25]
    io.EXtoMEM.register_write_enable_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 75:44]
    io.EXtoMEM.write_back_select_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 76:40]
    io.EXtoMEM.data_memory_write_enable_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 77:47]
    io.EXtoMEM.address_is_io_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 78:36]
    io.EXtoMEM.io_memory_write_enable_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 79:45]
    io.EXtoMEM.alu_operation_select_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 80:43]
    node _io_EXtoIFD_branch_address_EXtoIFD_T = add(branchAddrReg, immediateReg) @[EXStage.scala 82:54]
    node _io_EXtoIFD_branch_address_EXtoIFD_T_1 = tail(_io_EXtoIFD_branch_address_EXtoIFD_T, 1) @[EXStage.scala 82:54]
    io.EXtoIFD.branch_address_EXtoIFD <= _io_EXtoIFD_branch_address_EXtoIFD_T_1 @[EXStage.scala 82:37]
    io.EXtoIFD.take_branch_EXtoIFD <= UInt<1>("h0") @[EXStage.scala 83:34]
    RegFile.io.rs1 <= io.decoded_instruction_IFDtoEX.rs1 @[EXStage.scala 86:18]
    RegFile.io.rs2 <= io.decoded_instruction_IFDtoEX.rs2 @[EXStage.scala 87:18]
    RegFile.io.rd_WBtoEX <= io.WBtoEX.rd_WBtoEX @[EXStage.scala 88:24]
    RegFile.io.regfile_write_data_WBtoEX <= io.WBtoEX.regfile_write_data_WBtoEX @[EXStage.scala 89:40]
    RegFile.io.regfile_write_enable_WBtoEX <= io.WBtoEX.regfile_write_enable_WBtoEX @[EXStage.scala 90:42]
    io.EXtoMEM.memory_write_data_EXtoMEM <= RegFile.io.reg_data_2 @[EXStage.scala 91:40]
    ALU.io.alu_operand_1 <= RegFile.io.alu_operand_1 @[EXStage.scala 94:24]
    node _ALU_io_alu_operand_2_T = eq(alu_op2mux_Reg, UInt<1>("h1")) @[EXStage.scala 95:46]
    node _ALU_io_alu_operand_2_T_1 = mux(_ALU_io_alu_operand_2_T, immediateReg, RegFile.io.reg_data_2) @[EXStage.scala 95:30]
    ALU.io.alu_operand_2 <= _ALU_io_alu_operand_2_T_1 @[EXStage.scala 95:24]
    io.EXtoMEM.alu_result_EXtoMEM <= ALU.io.alu_result @[EXStage.scala 96:33]
    io.EXtoIFD.take_branch_EXtoIFD <= ALU.io.take_branch_EXtoMEM @[EXStage.scala 97:34]
    io.EXtoMEM.register_write_enable_EXtoMEM <= register_write_Reg @[EXStage.scala 110:44]
    io.EXtoMEM.write_back_select_EXtoMEM <= write_back_Reg @[EXStage.scala 111:40]
    io.EXtoMEM.data_memory_write_enable_EXtoMEM <= write_memory_Reg @[EXStage.scala 112:47]
    ALU.io.alu_operation_select <= alu_operation_Reg @[EXStage.scala 113:31]
    io.EXtoMEM.alu_operation_select_EXtoMEM <= alu_operation_Reg @[EXStage.scala 114:43]
    node _T = geq(ALU.io.alu_result, UInt<11>("h400")) @[EXStage.scala 118:26]
    when _T : @[EXStage.scala 118:99]
      io.EXtoMEM.data_memory_write_enable_EXtoMEM <= UInt<1>("h0") @[EXStage.scala 119:49]
      io.EXtoMEM.address_is_io_EXtoMEM <= UInt<1>("h1") @[EXStage.scala 120:38]
      io.EXtoMEM.io_memory_write_enable_EXtoMEM <= write_memory_Reg @[EXStage.scala 121:47]
    io.EXtoMEM.rd_EXtoMEM <= rdReg @[EXStage.scala 126:25]
    node _T_1 = eq(opcodeReg, UInt<6>("h37")) @[EXStage.scala 129:18]
    when _T_1 : @[EXStage.scala 129:33]
      io.EXtoMEM.alu_result_EXtoMEM <= immediateReg @[EXStage.scala 130:35]
    node _T_2 = eq(opcodeReg, UInt<5>("h17")) @[EXStage.scala 133:18]
    when _T_2 : @[EXStage.scala 133:35]
      node _io_EXtoMEM_alu_result_EXtoMEM_T = add(branchAddrReg, immediateReg) @[EXStage.scala 134:52]
      node _io_EXtoMEM_alu_result_EXtoMEM_T_1 = tail(_io_EXtoMEM_alu_result_EXtoMEM_T, 1) @[EXStage.scala 134:52]
      io.EXtoMEM.alu_result_EXtoMEM <= _io_EXtoMEM_alu_result_EXtoMEM_T_1 @[EXStage.scala 134:35]
    node _T_3 = eq(opcodeReg, UInt<7>("h6f")) @[EXStage.scala 137:18]
    when _T_3 : @[EXStage.scala 137:33]
      node _io_EXtoIFD_branch_address_EXtoIFD_T_2 = add(branchAddrReg, immediateReg) @[EXStage.scala 138:56]
      node _io_EXtoIFD_branch_address_EXtoIFD_T_3 = tail(_io_EXtoIFD_branch_address_EXtoIFD_T_2, 1) @[EXStage.scala 138:56]
      io.EXtoIFD.branch_address_EXtoIFD <= _io_EXtoIFD_branch_address_EXtoIFD_T_3 @[EXStage.scala 138:39]
      node _io_EXtoMEM_alu_result_EXtoMEM_T_2 = add(branchAddrReg, UInt<3>("h4")) @[EXStage.scala 139:52]
      node _io_EXtoMEM_alu_result_EXtoMEM_T_3 = tail(_io_EXtoMEM_alu_result_EXtoMEM_T_2, 1) @[EXStage.scala 139:52]
      io.EXtoMEM.alu_result_EXtoMEM <= _io_EXtoMEM_alu_result_EXtoMEM_T_3 @[EXStage.scala 139:35]
    node _T_4 = eq(opcodeReg, UInt<7>("h67")) @[EXStage.scala 141:18]
    when _T_4 : @[EXStage.scala 141:34]
      node _io_EXtoIFD_branch_address_EXtoIFD_T_4 = add(RegFile.io.alu_operand_1, immediateReg) @[EXStage.scala 142:67]
      node _io_EXtoIFD_branch_address_EXtoIFD_T_5 = tail(_io_EXtoIFD_branch_address_EXtoIFD_T_4, 1) @[EXStage.scala 142:67]
      io.EXtoIFD.branch_address_EXtoIFD <= _io_EXtoIFD_branch_address_EXtoIFD_T_5 @[EXStage.scala 142:39]
      node _io_EXtoMEM_alu_result_EXtoMEM_T_4 = add(branchAddrReg, UInt<3>("h4")) @[EXStage.scala 143:52]
      node _io_EXtoMEM_alu_result_EXtoMEM_T_5 = tail(_io_EXtoMEM_alu_result_EXtoMEM_T_4, 1) @[EXStage.scala 143:52]
      io.EXtoMEM.alu_result_EXtoMEM <= _io_EXtoMEM_alu_result_EXtoMEM_T_5 @[EXStage.scala 143:35]


  module DataMemory :
    input clock : Clock
    input reset : Reset
    output io : { flip addr : UInt<10>, flip enableWrite : UInt<1>, flip dataIn : UInt<32>, flip alu_operation_select_EXtoMEM : UInt<8>, dataOut : UInt<32>}

    node commonAddr = bits(io.addr, 9, 2) @[DataMemory.scala 16:27]
    node specAddr = bits(io.addr, 1, 0) @[DataMemory.scala 17:25]
    wire dataOut : UInt<32> @[DataMemory.scala 18:28]
    dataOut <= UInt<32>("h0") @[DataMemory.scala 18:28]
    smem mem0 : UInt<8> [256] @[DataMemory.scala 21:25]
    smem mem1 : UInt<8> [256] @[DataMemory.scala 22:25]
    smem mem2 : UInt<8> [256] @[DataMemory.scala 23:25]
    smem mem3 : UInt<8> [256] @[DataMemory.scala 24:25]
    node _T = eq(UInt<5>("h10"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
    when _T : @[DataMemory.scala 26:42]
      node _T_1 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 29:23]
      when _T_1 : @[DataMemory.scala 29:23]
        wire _dataOut_WIRE : UInt @[DataMemory.scala 32:44]
        _dataOut_WIRE is invalid @[DataMemory.scala 32:44]
        when UInt<1>("h1") : @[DataMemory.scala 32:44]
          _dataOut_WIRE <= commonAddr @[DataMemory.scala 32:44]
          node _dataOut_T = or(_dataOut_WIRE, UInt<8>("h0")) @[DataMemory.scala 32:44]
          node _dataOut_T_1 = bits(_dataOut_T, 7, 0) @[DataMemory.scala 32:44]
          read mport dataOut_MPORT = mem0[_dataOut_T_1], clock @[DataMemory.scala 32:44]
        node _dataOut_T_2 = bits(dataOut_MPORT, 7, 7) @[DataMemory.scala 32:56]
        node _dataOut_T_3 = bits(_dataOut_T_2, 0, 0) @[Bitwise.scala 77:15]
        node _dataOut_T_4 = mux(_dataOut_T_3, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
        wire _dataOut_WIRE_1 : UInt @[DataMemory.scala 32:71]
        _dataOut_WIRE_1 is invalid @[DataMemory.scala 32:71]
        when UInt<1>("h1") : @[DataMemory.scala 32:71]
          _dataOut_WIRE_1 <= commonAddr @[DataMemory.scala 32:71]
          node _dataOut_T_5 = or(_dataOut_WIRE_1, UInt<8>("h0")) @[DataMemory.scala 32:71]
          node _dataOut_T_6 = bits(_dataOut_T_5, 7, 0) @[DataMemory.scala 32:71]
          read mport dataOut_MPORT_1 = mem0[_dataOut_T_6], clock @[DataMemory.scala 32:71]
        node _dataOut_T_7 = cat(_dataOut_T_4, dataOut_MPORT_1) @[Cat.scala 33:92]
        dataOut <= _dataOut_T_7 @[DataMemory.scala 32:19]
      else :
        node _T_2 = eq(UInt<1>("h1"), specAddr) @[DataMemory.scala 29:23]
        when _T_2 : @[DataMemory.scala 29:23]
          wire _dataOut_WIRE_2 : UInt @[DataMemory.scala 35:44]
          _dataOut_WIRE_2 is invalid @[DataMemory.scala 35:44]
          when UInt<1>("h1") : @[DataMemory.scala 35:44]
            _dataOut_WIRE_2 <= commonAddr @[DataMemory.scala 35:44]
            node _dataOut_T_8 = or(_dataOut_WIRE_2, UInt<8>("h0")) @[DataMemory.scala 35:44]
            node _dataOut_T_9 = bits(_dataOut_T_8, 7, 0) @[DataMemory.scala 35:44]
            read mport dataOut_MPORT_2 = mem1[_dataOut_T_9], clock @[DataMemory.scala 35:44]
          node _dataOut_T_10 = bits(dataOut_MPORT_2, 7, 7) @[DataMemory.scala 35:56]
          node _dataOut_T_11 = bits(_dataOut_T_10, 0, 0) @[Bitwise.scala 77:15]
          node _dataOut_T_12 = mux(_dataOut_T_11, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
          wire _dataOut_WIRE_3 : UInt @[DataMemory.scala 35:71]
          _dataOut_WIRE_3 is invalid @[DataMemory.scala 35:71]
          when UInt<1>("h1") : @[DataMemory.scala 35:71]
            _dataOut_WIRE_3 <= commonAddr @[DataMemory.scala 35:71]
            node _dataOut_T_13 = or(_dataOut_WIRE_3, UInt<8>("h0")) @[DataMemory.scala 35:71]
            node _dataOut_T_14 = bits(_dataOut_T_13, 7, 0) @[DataMemory.scala 35:71]
            read mport dataOut_MPORT_3 = mem1[_dataOut_T_14], clock @[DataMemory.scala 35:71]
          node _dataOut_T_15 = cat(_dataOut_T_12, dataOut_MPORT_3) @[Cat.scala 33:92]
          dataOut <= _dataOut_T_15 @[DataMemory.scala 35:19]
        else :
          node _T_3 = eq(UInt<2>("h2"), specAddr) @[DataMemory.scala 29:23]
          when _T_3 : @[DataMemory.scala 29:23]
            wire _dataOut_WIRE_4 : UInt @[DataMemory.scala 38:44]
            _dataOut_WIRE_4 is invalid @[DataMemory.scala 38:44]
            when UInt<1>("h1") : @[DataMemory.scala 38:44]
              _dataOut_WIRE_4 <= commonAddr @[DataMemory.scala 38:44]
              node _dataOut_T_16 = or(_dataOut_WIRE_4, UInt<8>("h0")) @[DataMemory.scala 38:44]
              node _dataOut_T_17 = bits(_dataOut_T_16, 7, 0) @[DataMemory.scala 38:44]
              read mport dataOut_MPORT_4 = mem2[_dataOut_T_17], clock @[DataMemory.scala 38:44]
            node _dataOut_T_18 = bits(dataOut_MPORT_4, 7, 7) @[DataMemory.scala 38:56]
            node _dataOut_T_19 = bits(_dataOut_T_18, 0, 0) @[Bitwise.scala 77:15]
            node _dataOut_T_20 = mux(_dataOut_T_19, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
            wire _dataOut_WIRE_5 : UInt @[DataMemory.scala 38:71]
            _dataOut_WIRE_5 is invalid @[DataMemory.scala 38:71]
            when UInt<1>("h1") : @[DataMemory.scala 38:71]
              _dataOut_WIRE_5 <= commonAddr @[DataMemory.scala 38:71]
              node _dataOut_T_21 = or(_dataOut_WIRE_5, UInt<8>("h0")) @[DataMemory.scala 38:71]
              node _dataOut_T_22 = bits(_dataOut_T_21, 7, 0) @[DataMemory.scala 38:71]
              read mport dataOut_MPORT_5 = mem2[_dataOut_T_22], clock @[DataMemory.scala 38:71]
            node _dataOut_T_23 = cat(_dataOut_T_20, dataOut_MPORT_5) @[Cat.scala 33:92]
            dataOut <= _dataOut_T_23 @[DataMemory.scala 38:19]
          else :
            node _T_4 = eq(UInt<2>("h3"), specAddr) @[DataMemory.scala 29:23]
            when _T_4 : @[DataMemory.scala 29:23]
              wire _dataOut_WIRE_6 : UInt @[DataMemory.scala 41:44]
              _dataOut_WIRE_6 is invalid @[DataMemory.scala 41:44]
              when UInt<1>("h1") : @[DataMemory.scala 41:44]
                _dataOut_WIRE_6 <= commonAddr @[DataMemory.scala 41:44]
                node _dataOut_T_24 = or(_dataOut_WIRE_6, UInt<8>("h0")) @[DataMemory.scala 41:44]
                node _dataOut_T_25 = bits(_dataOut_T_24, 7, 0) @[DataMemory.scala 41:44]
                read mport dataOut_MPORT_6 = mem3[_dataOut_T_25], clock @[DataMemory.scala 41:44]
              node _dataOut_T_26 = bits(dataOut_MPORT_6, 7, 7) @[DataMemory.scala 41:56]
              node _dataOut_T_27 = bits(_dataOut_T_26, 0, 0) @[Bitwise.scala 77:15]
              node _dataOut_T_28 = mux(_dataOut_T_27, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              wire _dataOut_WIRE_7 : UInt @[DataMemory.scala 41:71]
              _dataOut_WIRE_7 is invalid @[DataMemory.scala 41:71]
              when UInt<1>("h1") : @[DataMemory.scala 41:71]
                _dataOut_WIRE_7 <= commonAddr @[DataMemory.scala 41:71]
                node _dataOut_T_29 = or(_dataOut_WIRE_7, UInt<8>("h0")) @[DataMemory.scala 41:71]
                node _dataOut_T_30 = bits(_dataOut_T_29, 7, 0) @[DataMemory.scala 41:71]
                read mport dataOut_MPORT_7 = mem3[_dataOut_T_30], clock @[DataMemory.scala 41:71]
              node _dataOut_T_31 = cat(_dataOut_T_28, dataOut_MPORT_7) @[Cat.scala 33:92]
              dataOut <= _dataOut_T_31 @[DataMemory.scala 41:19]
    else :
      node _T_5 = eq(UInt<5>("h13"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
      when _T_5 : @[DataMemory.scala 26:42]
        node _T_6 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 46:23]
        when _T_6 : @[DataMemory.scala 46:23]
          node _dataOut_T_32 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
          wire _dataOut_WIRE_8 : UInt @[DataMemory.scala 48:50]
          _dataOut_WIRE_8 is invalid @[DataMemory.scala 48:50]
          when UInt<1>("h1") : @[DataMemory.scala 48:50]
            _dataOut_WIRE_8 <= commonAddr @[DataMemory.scala 48:50]
            node _dataOut_T_33 = or(_dataOut_WIRE_8, UInt<8>("h0")) @[DataMemory.scala 48:50]
            node _dataOut_T_34 = bits(_dataOut_T_33, 7, 0) @[DataMemory.scala 48:50]
            read mport dataOut_MPORT_8 = mem0[_dataOut_T_34], clock @[DataMemory.scala 48:50]
          node _dataOut_T_35 = cat(_dataOut_T_32, dataOut_MPORT_8) @[Cat.scala 33:92]
          dataOut <= _dataOut_T_35 @[DataMemory.scala 48:19]
        else :
          node _T_7 = eq(UInt<1>("h1"), specAddr) @[DataMemory.scala 46:23]
          when _T_7 : @[DataMemory.scala 46:23]
            node _dataOut_T_36 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
            wire _dataOut_WIRE_9 : UInt @[DataMemory.scala 51:50]
            _dataOut_WIRE_9 is invalid @[DataMemory.scala 51:50]
            when UInt<1>("h1") : @[DataMemory.scala 51:50]
              _dataOut_WIRE_9 <= commonAddr @[DataMemory.scala 51:50]
              node _dataOut_T_37 = or(_dataOut_WIRE_9, UInt<8>("h0")) @[DataMemory.scala 51:50]
              node _dataOut_T_38 = bits(_dataOut_T_37, 7, 0) @[DataMemory.scala 51:50]
              read mport dataOut_MPORT_9 = mem1[_dataOut_T_38], clock @[DataMemory.scala 51:50]
            node _dataOut_T_39 = cat(_dataOut_T_36, dataOut_MPORT_9) @[Cat.scala 33:92]
            dataOut <= _dataOut_T_39 @[DataMemory.scala 51:19]
          else :
            node _T_8 = eq(UInt<2>("h2"), specAddr) @[DataMemory.scala 46:23]
            when _T_8 : @[DataMemory.scala 46:23]
              node _dataOut_T_40 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
              wire _dataOut_WIRE_10 : UInt @[DataMemory.scala 54:50]
              _dataOut_WIRE_10 is invalid @[DataMemory.scala 54:50]
              when UInt<1>("h1") : @[DataMemory.scala 54:50]
                _dataOut_WIRE_10 <= commonAddr @[DataMemory.scala 54:50]
                node _dataOut_T_41 = or(_dataOut_WIRE_10, UInt<8>("h0")) @[DataMemory.scala 54:50]
                node _dataOut_T_42 = bits(_dataOut_T_41, 7, 0) @[DataMemory.scala 54:50]
                read mport dataOut_MPORT_10 = mem2[_dataOut_T_42], clock @[DataMemory.scala 54:50]
              node _dataOut_T_43 = cat(_dataOut_T_40, dataOut_MPORT_10) @[Cat.scala 33:92]
              dataOut <= _dataOut_T_43 @[DataMemory.scala 54:19]
            else :
              node _T_9 = eq(UInt<2>("h3"), specAddr) @[DataMemory.scala 46:23]
              when _T_9 : @[DataMemory.scala 46:23]
                node _dataOut_T_44 = mux(UInt<1>("h0"), UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                wire _dataOut_WIRE_11 : UInt @[DataMemory.scala 57:50]
                _dataOut_WIRE_11 is invalid @[DataMemory.scala 57:50]
                when UInt<1>("h1") : @[DataMemory.scala 57:50]
                  _dataOut_WIRE_11 <= commonAddr @[DataMemory.scala 57:50]
                  node _dataOut_T_45 = or(_dataOut_WIRE_11, UInt<8>("h0")) @[DataMemory.scala 57:50]
                  node _dataOut_T_46 = bits(_dataOut_T_45, 7, 0) @[DataMemory.scala 57:50]
                  read mport dataOut_MPORT_11 = mem3[_dataOut_T_46], clock @[DataMemory.scala 57:50]
                node _dataOut_T_47 = cat(_dataOut_T_44, dataOut_MPORT_11) @[Cat.scala 33:92]
                dataOut <= _dataOut_T_47 @[DataMemory.scala 57:19]
      else :
        node _T_10 = eq(UInt<5>("h11"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
        when _T_10 : @[DataMemory.scala 26:42]
          node _T_11 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 62:23]
          when _T_11 : @[DataMemory.scala 62:23]
            wire _dataOut_WIRE_12 : UInt @[DataMemory.scala 64:44]
            _dataOut_WIRE_12 is invalid @[DataMemory.scala 64:44]
            when UInt<1>("h1") : @[DataMemory.scala 64:44]
              _dataOut_WIRE_12 <= commonAddr @[DataMemory.scala 64:44]
              node _dataOut_T_48 = or(_dataOut_WIRE_12, UInt<8>("h0")) @[DataMemory.scala 64:44]
              node _dataOut_T_49 = bits(_dataOut_T_48, 7, 0) @[DataMemory.scala 64:44]
              read mport dataOut_MPORT_12 = mem1[_dataOut_T_49], clock @[DataMemory.scala 64:44]
            node _dataOut_T_50 = bits(dataOut_MPORT_12, 7, 7) @[DataMemory.scala 64:56]
            node _dataOut_T_51 = bits(_dataOut_T_50, 0, 0) @[Bitwise.scala 77:15]
            node _dataOut_T_52 = mux(_dataOut_T_51, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
            wire _dataOut_WIRE_13 : UInt @[DataMemory.scala 64:71]
            _dataOut_WIRE_13 is invalid @[DataMemory.scala 64:71]
            when UInt<1>("h1") : @[DataMemory.scala 64:71]
              _dataOut_WIRE_13 <= commonAddr @[DataMemory.scala 64:71]
              node _dataOut_T_53 = or(_dataOut_WIRE_13, UInt<8>("h0")) @[DataMemory.scala 64:71]
              node _dataOut_T_54 = bits(_dataOut_T_53, 7, 0) @[DataMemory.scala 64:71]
              read mport dataOut_MPORT_13 = mem1[_dataOut_T_54], clock @[DataMemory.scala 64:71]
            wire _dataOut_WIRE_14 : UInt @[DataMemory.scala 64:94]
            _dataOut_WIRE_14 is invalid @[DataMemory.scala 64:94]
            when UInt<1>("h1") : @[DataMemory.scala 64:94]
              _dataOut_WIRE_14 <= commonAddr @[DataMemory.scala 64:94]
              node _dataOut_T_55 = or(_dataOut_WIRE_14, UInt<8>("h0")) @[DataMemory.scala 64:94]
              node _dataOut_T_56 = bits(_dataOut_T_55, 7, 0) @[DataMemory.scala 64:94]
              read mport dataOut_MPORT_14 = mem0[_dataOut_T_56], clock @[DataMemory.scala 64:94]
            node dataOut_hi = cat(_dataOut_T_52, dataOut_MPORT_13) @[Cat.scala 33:92]
            node _dataOut_T_57 = cat(dataOut_hi, dataOut_MPORT_14) @[Cat.scala 33:92]
            dataOut <= _dataOut_T_57 @[DataMemory.scala 64:19]
          else :
            node _T_12 = eq(UInt<2>("h2"), specAddr) @[DataMemory.scala 62:23]
            when _T_12 : @[DataMemory.scala 62:23]
              wire _dataOut_WIRE_15 : UInt @[DataMemory.scala 67:44]
              _dataOut_WIRE_15 is invalid @[DataMemory.scala 67:44]
              when UInt<1>("h1") : @[DataMemory.scala 67:44]
                _dataOut_WIRE_15 <= commonAddr @[DataMemory.scala 67:44]
                node _dataOut_T_58 = or(_dataOut_WIRE_15, UInt<8>("h0")) @[DataMemory.scala 67:44]
                node _dataOut_T_59 = bits(_dataOut_T_58, 7, 0) @[DataMemory.scala 67:44]
                read mport dataOut_MPORT_15 = mem3[_dataOut_T_59], clock @[DataMemory.scala 67:44]
              node _dataOut_T_60 = bits(dataOut_MPORT_15, 7, 7) @[DataMemory.scala 67:56]
              node _dataOut_T_61 = bits(_dataOut_T_60, 0, 0) @[Bitwise.scala 77:15]
              node _dataOut_T_62 = mux(_dataOut_T_61, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
              wire _dataOut_WIRE_16 : UInt @[DataMemory.scala 67:71]
              _dataOut_WIRE_16 is invalid @[DataMemory.scala 67:71]
              when UInt<1>("h1") : @[DataMemory.scala 67:71]
                _dataOut_WIRE_16 <= commonAddr @[DataMemory.scala 67:71]
                node _dataOut_T_63 = or(_dataOut_WIRE_16, UInt<8>("h0")) @[DataMemory.scala 67:71]
                node _dataOut_T_64 = bits(_dataOut_T_63, 7, 0) @[DataMemory.scala 67:71]
                read mport dataOut_MPORT_16 = mem3[_dataOut_T_64], clock @[DataMemory.scala 67:71]
              wire _dataOut_WIRE_17 : UInt @[DataMemory.scala 67:94]
              _dataOut_WIRE_17 is invalid @[DataMemory.scala 67:94]
              when UInt<1>("h1") : @[DataMemory.scala 67:94]
                _dataOut_WIRE_17 <= commonAddr @[DataMemory.scala 67:94]
                node _dataOut_T_65 = or(_dataOut_WIRE_17, UInt<8>("h0")) @[DataMemory.scala 67:94]
                node _dataOut_T_66 = bits(_dataOut_T_65, 7, 0) @[DataMemory.scala 67:94]
                read mport dataOut_MPORT_17 = mem2[_dataOut_T_66], clock @[DataMemory.scala 67:94]
              node dataOut_hi_1 = cat(_dataOut_T_62, dataOut_MPORT_16) @[Cat.scala 33:92]
              node _dataOut_T_67 = cat(dataOut_hi_1, dataOut_MPORT_17) @[Cat.scala 33:92]
              dataOut <= _dataOut_T_67 @[DataMemory.scala 67:19]
        else :
          node _T_13 = eq(UInt<5>("h14"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
          when _T_13 : @[DataMemory.scala 26:42]
            node _T_14 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 72:23]
            when _T_14 : @[DataMemory.scala 72:23]
              node _dataOut_T_68 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
              wire _dataOut_WIRE_18 : UInt @[DataMemory.scala 74:50]
              _dataOut_WIRE_18 is invalid @[DataMemory.scala 74:50]
              when UInt<1>("h1") : @[DataMemory.scala 74:50]
                _dataOut_WIRE_18 <= commonAddr @[DataMemory.scala 74:50]
                node _dataOut_T_69 = or(_dataOut_WIRE_18, UInt<8>("h0")) @[DataMemory.scala 74:50]
                node _dataOut_T_70 = bits(_dataOut_T_69, 7, 0) @[DataMemory.scala 74:50]
                read mport dataOut_MPORT_18 = mem1[_dataOut_T_70], clock @[DataMemory.scala 74:50]
              wire _dataOut_WIRE_19 : UInt @[DataMemory.scala 74:73]
              _dataOut_WIRE_19 is invalid @[DataMemory.scala 74:73]
              when UInt<1>("h1") : @[DataMemory.scala 74:73]
                _dataOut_WIRE_19 <= commonAddr @[DataMemory.scala 74:73]
                node _dataOut_T_71 = or(_dataOut_WIRE_19, UInt<8>("h0")) @[DataMemory.scala 74:73]
                node _dataOut_T_72 = bits(_dataOut_T_71, 7, 0) @[DataMemory.scala 74:73]
                read mport dataOut_MPORT_19 = mem0[_dataOut_T_72], clock @[DataMemory.scala 74:73]
              node dataOut_hi_2 = cat(_dataOut_T_68, dataOut_MPORT_18) @[Cat.scala 33:92]
              node _dataOut_T_73 = cat(dataOut_hi_2, dataOut_MPORT_19) @[Cat.scala 33:92]
              dataOut <= _dataOut_T_73 @[DataMemory.scala 74:19]
            else :
              node _T_15 = eq(UInt<2>("h2"), specAddr) @[DataMemory.scala 72:23]
              when _T_15 : @[DataMemory.scala 72:23]
                node _dataOut_T_74 = mux(UInt<1>("h0"), UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                wire _dataOut_WIRE_20 : UInt @[DataMemory.scala 77:50]
                _dataOut_WIRE_20 is invalid @[DataMemory.scala 77:50]
                when UInt<1>("h1") : @[DataMemory.scala 77:50]
                  _dataOut_WIRE_20 <= commonAddr @[DataMemory.scala 77:50]
                  node _dataOut_T_75 = or(_dataOut_WIRE_20, UInt<8>("h0")) @[DataMemory.scala 77:50]
                  node _dataOut_T_76 = bits(_dataOut_T_75, 7, 0) @[DataMemory.scala 77:50]
                  read mport dataOut_MPORT_20 = mem3[_dataOut_T_76], clock @[DataMemory.scala 77:50]
                wire _dataOut_WIRE_21 : UInt @[DataMemory.scala 77:73]
                _dataOut_WIRE_21 is invalid @[DataMemory.scala 77:73]
                when UInt<1>("h1") : @[DataMemory.scala 77:73]
                  _dataOut_WIRE_21 <= commonAddr @[DataMemory.scala 77:73]
                  node _dataOut_T_77 = or(_dataOut_WIRE_21, UInt<8>("h0")) @[DataMemory.scala 77:73]
                  node _dataOut_T_78 = bits(_dataOut_T_77, 7, 0) @[DataMemory.scala 77:73]
                  read mport dataOut_MPORT_21 = mem2[_dataOut_T_78], clock @[DataMemory.scala 77:73]
                node dataOut_hi_3 = cat(_dataOut_T_74, dataOut_MPORT_20) @[Cat.scala 33:92]
                node _dataOut_T_79 = cat(dataOut_hi_3, dataOut_MPORT_21) @[Cat.scala 33:92]
                dataOut <= _dataOut_T_79 @[DataMemory.scala 77:19]
          else :
            node _T_16 = eq(UInt<5>("h12"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
            when _T_16 : @[DataMemory.scala 26:42]
              node _T_17 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 82:23]
              when _T_17 : @[DataMemory.scala 82:23]
                wire _dataOut_WIRE_22 : UInt @[DataMemory.scala 84:35]
                _dataOut_WIRE_22 is invalid @[DataMemory.scala 84:35]
                when UInt<1>("h1") : @[DataMemory.scala 84:35]
                  _dataOut_WIRE_22 <= commonAddr @[DataMemory.scala 84:35]
                  node _dataOut_T_80 = or(_dataOut_WIRE_22, UInt<8>("h0")) @[DataMemory.scala 84:35]
                  node _dataOut_T_81 = bits(_dataOut_T_80, 7, 0) @[DataMemory.scala 84:35]
                  read mport dataOut_MPORT_22 = mem3[_dataOut_T_81], clock @[DataMemory.scala 84:35]
                wire _dataOut_WIRE_23 : UInt @[DataMemory.scala 84:58]
                _dataOut_WIRE_23 is invalid @[DataMemory.scala 84:58]
                when UInt<1>("h1") : @[DataMemory.scala 84:58]
                  _dataOut_WIRE_23 <= commonAddr @[DataMemory.scala 84:58]
                  node _dataOut_T_82 = or(_dataOut_WIRE_23, UInt<8>("h0")) @[DataMemory.scala 84:58]
                  node _dataOut_T_83 = bits(_dataOut_T_82, 7, 0) @[DataMemory.scala 84:58]
                  read mport dataOut_MPORT_23 = mem2[_dataOut_T_83], clock @[DataMemory.scala 84:58]
                wire _dataOut_WIRE_24 : UInt @[DataMemory.scala 84:81]
                _dataOut_WIRE_24 is invalid @[DataMemory.scala 84:81]
                when UInt<1>("h1") : @[DataMemory.scala 84:81]
                  _dataOut_WIRE_24 <= commonAddr @[DataMemory.scala 84:81]
                  node _dataOut_T_84 = or(_dataOut_WIRE_24, UInt<8>("h0")) @[DataMemory.scala 84:81]
                  node _dataOut_T_85 = bits(_dataOut_T_84, 7, 0) @[DataMemory.scala 84:81]
                  read mport dataOut_MPORT_24 = mem1[_dataOut_T_85], clock @[DataMemory.scala 84:81]
                wire _dataOut_WIRE_25 : UInt @[DataMemory.scala 84:104]
                _dataOut_WIRE_25 is invalid @[DataMemory.scala 84:104]
                when UInt<1>("h1") : @[DataMemory.scala 84:104]
                  _dataOut_WIRE_25 <= commonAddr @[DataMemory.scala 84:104]
                  node _dataOut_T_86 = or(_dataOut_WIRE_25, UInt<8>("h0")) @[DataMemory.scala 84:104]
                  node _dataOut_T_87 = bits(_dataOut_T_86, 7, 0) @[DataMemory.scala 84:104]
                  read mport dataOut_MPORT_25 = mem0[_dataOut_T_87], clock @[DataMemory.scala 84:104]
                node dataOut_lo = cat(dataOut_MPORT_24, dataOut_MPORT_25) @[Cat.scala 33:92]
                node dataOut_hi_4 = cat(dataOut_MPORT_22, dataOut_MPORT_23) @[Cat.scala 33:92]
                node _dataOut_T_88 = cat(dataOut_hi_4, dataOut_lo) @[Cat.scala 33:92]
                dataOut <= _dataOut_T_88 @[DataMemory.scala 84:19]
            else :
              node _T_18 = eq(UInt<5>("h15"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
              when _T_18 : @[DataMemory.scala 26:42]
                node _T_19 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 91:23]
                when _T_19 : @[DataMemory.scala 91:23]
                  when io.enableWrite : @[DataMemory.scala 93:31]
                    node _T_20 = bits(io.dataIn, 7, 0) @[DataMemory.scala 94:45]
                    write mport MPORT = mem0[commonAddr], clock
                    MPORT <= _T_20
                else :
                  node _T_21 = eq(UInt<1>("h1"), specAddr) @[DataMemory.scala 91:23]
                  when _T_21 : @[DataMemory.scala 91:23]
                    when io.enableWrite : @[DataMemory.scala 98:31]
                      node _T_22 = bits(io.dataIn, 7, 0) @[DataMemory.scala 99:45]
                      write mport MPORT_1 = mem1[commonAddr], clock
                      MPORT_1 <= _T_22
                  else :
                    node _T_23 = eq(UInt<2>("h2"), specAddr) @[DataMemory.scala 91:23]
                    when _T_23 : @[DataMemory.scala 91:23]
                      when io.enableWrite : @[DataMemory.scala 103:31]
                        node _T_24 = bits(io.dataIn, 7, 0) @[DataMemory.scala 104:45]
                        write mport MPORT_2 = mem2[commonAddr], clock
                        MPORT_2 <= _T_24
                    else :
                      node _T_25 = eq(UInt<2>("h3"), specAddr) @[DataMemory.scala 91:23]
                      when _T_25 : @[DataMemory.scala 91:23]
                        when io.enableWrite : @[DataMemory.scala 108:31]
                          node _T_26 = bits(io.dataIn, 7, 0) @[DataMemory.scala 109:45]
                          write mport MPORT_3 = mem3[commonAddr], clock
                          MPORT_3 <= _T_26
              else :
                node _T_27 = eq(UInt<5>("h16"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
                when _T_27 : @[DataMemory.scala 26:42]
                  node _T_28 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 115:23]
                  when _T_28 : @[DataMemory.scala 115:23]
                    when io.enableWrite : @[DataMemory.scala 117:31]
                      node _T_29 = bits(io.dataIn, 7, 0) @[DataMemory.scala 118:45]
                      write mport MPORT_4 = mem0[commonAddr], clock
                      MPORT_4 <= _T_29
                      node _T_30 = bits(io.dataIn, 15, 8) @[DataMemory.scala 119:45]
                      write mport MPORT_5 = mem1[commonAddr], clock
                      MPORT_5 <= _T_30
                  else :
                    node _T_31 = eq(UInt<2>("h2"), specAddr) @[DataMemory.scala 115:23]
                    when _T_31 : @[DataMemory.scala 115:23]
                      when io.enableWrite : @[DataMemory.scala 123:31]
                        node _T_32 = bits(io.dataIn, 7, 0) @[DataMemory.scala 124:45]
                        write mport MPORT_6 = mem2[commonAddr], clock
                        MPORT_6 <= _T_32
                        node _T_33 = bits(io.dataIn, 15, 8) @[DataMemory.scala 125:45]
                        write mport MPORT_7 = mem3[commonAddr], clock
                        MPORT_7 <= _T_33
                else :
                  node _T_34 = eq(UInt<5>("h17"), io.alu_operation_select_EXtoMEM) @[DataMemory.scala 26:42]
                  when _T_34 : @[DataMemory.scala 26:42]
                    node _T_35 = eq(UInt<1>("h0"), specAddr) @[DataMemory.scala 131:23]
                    when _T_35 : @[DataMemory.scala 131:23]
                      when io.enableWrite : @[DataMemory.scala 133:31]
                        node _T_36 = bits(io.dataIn, 7, 0) @[DataMemory.scala 134:45]
                        write mport MPORT_8 = mem0[commonAddr], clock
                        MPORT_8 <= _T_36
                        node _T_37 = bits(io.dataIn, 15, 8) @[DataMemory.scala 135:45]
                        write mport MPORT_9 = mem1[commonAddr], clock
                        MPORT_9 <= _T_37
                        node _T_38 = bits(io.dataIn, 23, 16) @[DataMemory.scala 136:45]
                        write mport MPORT_10 = mem2[commonAddr], clock
                        MPORT_10 <= _T_38
                        node _T_39 = bits(io.dataIn, 31, 24) @[DataMemory.scala 137:45]
                        write mport MPORT_11 = mem3[commonAddr], clock
                        MPORT_11 <= _T_39
    io.dataOut <= dataOut @[DataMemory.scala 143:14]

  module MemoryMappedLeds :
    input clock : Clock
    input reset : Reset
    output io : { flip port : { read : UInt<1>, write : UInt<1>, addr : UInt<32>, wrData : UInt<32>, flip rdData : UInt<32>}, pins : UInt<16>}

    reg led_reg : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[MemoryMappedLeds.scala 28:24]
    wire _pwm_reg_WIRE : UInt<8>[16] @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[0] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[1] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[2] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[3] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[4] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[5] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[6] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[7] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[8] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[9] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[10] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[11] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[12] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[13] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[14] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    _pwm_reg_WIRE[15] <= UInt<8>("hff") @[MemoryMappedLeds.scala 30:33]
    reg pwm_reg : UInt<8>[16], clock with :
      reset => (reset, _pwm_reg_WIRE) @[MemoryMappedLeds.scala 30:24]
    reg pwm_counter : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[MemoryMappedLeds.scala 31:28]
    reg clk_prescaler : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[MemoryMappedLeds.scala 32:30]
    node _clk_prescaler_T = add(clk_prescaler, UInt<1>("h1")) @[MemoryMappedLeds.scala 34:34]
    node _clk_prescaler_T_1 = tail(_clk_prescaler_T, 1) @[MemoryMappedLeds.scala 34:34]
    clk_prescaler <= _clk_prescaler_T_1 @[MemoryMappedLeds.scala 34:17]
    node _pwm_addr_T = sub(io.port.addr, UInt<7>("h40")) @[MemoryMappedLeds.scala 37:31]
    node pwm_addr = tail(_pwm_addr_T, 1) @[MemoryMappedLeds.scala 37:31]
    when io.port.write : @[MemoryMappedLeds.scala 38:23]
      node _T = eq(io.port.addr, UInt<6>("h30")) @[MemoryMappedLeds.scala 39:23]
      when _T : @[MemoryMappedLeds.scala 39:46]
        led_reg <= io.port.wrData @[MemoryMappedLeds.scala 40:15]
      else :
        node _T_1 = lt(pwm_addr, UInt<5>("h10")) @[MemoryMappedLeds.scala 41:26]
        when _T_1 : @[MemoryMappedLeds.scala 41:37]
          node _T_2 = bits(pwm_addr, 3, 0)
          pwm_reg[_T_2] <= io.port.wrData @[MemoryMappedLeds.scala 42:25]
    reg rdData : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[MemoryMappedLeds.scala 47:23]
    rdData is invalid @[MemoryMappedLeds.scala 48:10]
    when io.port.read : @[MemoryMappedLeds.scala 49:22]
      node _T_3 = eq(io.port.addr, UInt<6>("h30")) @[MemoryMappedLeds.scala 50:23]
      when _T_3 : @[MemoryMappedLeds.scala 50:46]
        rdData <= led_reg @[MemoryMappedLeds.scala 51:14]
      else :
        skip
    reg io_port_rdData_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_port_rdData_REG) @[MemoryMappedLeds.scala 56:28]
    io_port_rdData_REG <= rdData @[MemoryMappedLeds.scala 56:28]
    io.port.rdData <= io_port_rdData_REG @[MemoryMappedLeds.scala 56:18]
    node _T_4 = eq(clk_prescaler, UInt<1>("h0")) @[MemoryMappedLeds.scala 59:22]
    when _T_4 : @[MemoryMappedLeds.scala 59:31]
      node _pwm_counter_T = add(pwm_counter, UInt<1>("h1")) @[MemoryMappedLeds.scala 60:32]
      node _pwm_counter_T_1 = tail(_pwm_counter_T, 1) @[MemoryMappedLeds.scala 60:32]
      pwm_counter <= _pwm_counter_T_1 @[MemoryMappedLeds.scala 60:17]
    wire led_state : UInt<1>[16] @[MemoryMappedLeds.scala 62:23]
    node _led_state_0_T = geq(pwm_reg[0], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[0] <= _led_state_0_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_1_T = geq(pwm_reg[1], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[1] <= _led_state_1_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_2_T = geq(pwm_reg[2], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[2] <= _led_state_2_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_3_T = geq(pwm_reg[3], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[3] <= _led_state_3_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_4_T = geq(pwm_reg[4], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[4] <= _led_state_4_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_5_T = geq(pwm_reg[5], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[5] <= _led_state_5_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_6_T = geq(pwm_reg[6], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[6] <= _led_state_6_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_7_T = geq(pwm_reg[7], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[7] <= _led_state_7_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_8_T = geq(pwm_reg[8], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[8] <= _led_state_8_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_9_T = geq(pwm_reg[9], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[9] <= _led_state_9_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_10_T = geq(pwm_reg[10], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[10] <= _led_state_10_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_11_T = geq(pwm_reg[11], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[11] <= _led_state_11_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_12_T = geq(pwm_reg[12], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[12] <= _led_state_12_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_13_T = geq(pwm_reg[13], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[13] <= _led_state_13_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_14_T = geq(pwm_reg[14], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[14] <= _led_state_14_T @[MemoryMappedLeds.scala 64:18]
    node _led_state_15_T = geq(pwm_reg[15], pwm_counter) @[MemoryMappedLeds.scala 64:32]
    led_state[15] <= _led_state_15_T @[MemoryMappedLeds.scala 64:18]
    node io_pins_lo_lo_lo = cat(led_state[1], led_state[0]) @[Cat.scala 33:92]
    node io_pins_lo_lo_hi = cat(led_state[3], led_state[2]) @[Cat.scala 33:92]
    node io_pins_lo_lo = cat(io_pins_lo_lo_hi, io_pins_lo_lo_lo) @[Cat.scala 33:92]
    node io_pins_lo_hi_lo = cat(led_state[5], led_state[4]) @[Cat.scala 33:92]
    node io_pins_lo_hi_hi = cat(led_state[7], led_state[6]) @[Cat.scala 33:92]
    node io_pins_lo_hi = cat(io_pins_lo_hi_hi, io_pins_lo_hi_lo) @[Cat.scala 33:92]
    node io_pins_lo = cat(io_pins_lo_hi, io_pins_lo_lo) @[Cat.scala 33:92]
    node io_pins_hi_lo_lo = cat(led_state[9], led_state[8]) @[Cat.scala 33:92]
    node io_pins_hi_lo_hi = cat(led_state[11], led_state[10]) @[Cat.scala 33:92]
    node io_pins_hi_lo = cat(io_pins_hi_lo_hi, io_pins_hi_lo_lo) @[Cat.scala 33:92]
    node io_pins_hi_hi_lo = cat(led_state[13], led_state[12]) @[Cat.scala 33:92]
    node io_pins_hi_hi_hi = cat(led_state[15], led_state[14]) @[Cat.scala 33:92]
    node io_pins_hi_hi = cat(io_pins_hi_hi_hi, io_pins_hi_hi_lo) @[Cat.scala 33:92]
    node io_pins_hi = cat(io_pins_hi_hi, io_pins_hi_lo) @[Cat.scala 33:92]
    node _io_pins_T = cat(io_pins_hi, io_pins_lo) @[Cat.scala 33:92]
    io.pins <= _io_pins_T @[MemoryMappedLeds.scala 66:11]

  module MemoryMappedSwitches :
    input clock : Clock
    input reset : Reset
    output io : { flip port : { read : UInt<1>, write : UInt<1>, addr : UInt<32>, wrData : UInt<32>, flip rdData : UInt<32>}, flip pins : UInt<16>}

    reg io_port_rdData_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_port_rdData_REG) @[MemoryMappedSwitches.scala 20:28]
    io_port_rdData_REG <= io.pins @[MemoryMappedSwitches.scala 20:28]
    io.port.rdData <= io_port_rdData_REG @[MemoryMappedSwitches.scala 20:18]

  module Tx :
    input clock : Clock
    input reset : Reset
    output io : { txd : UInt<1>, flip channel : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}}

    reg shiftReg : UInt, clock with :
      reset => (reset, UInt<11>("h7ff")) @[Uart.scala 30:25]
    reg cntReg : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[Uart.scala 31:23]
    reg bitsReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 32:24]
    node _io_channel_ready_T = eq(cntReg, UInt<1>("h0")) @[Uart.scala 34:31]
    node _io_channel_ready_T_1 = eq(bitsReg, UInt<1>("h0")) @[Uart.scala 34:52]
    node _io_channel_ready_T_2 = and(_io_channel_ready_T, _io_channel_ready_T_1) @[Uart.scala 34:40]
    io.channel.ready <= _io_channel_ready_T_2 @[Uart.scala 34:20]
    node _io_txd_T = bits(shiftReg, 0, 0) @[Uart.scala 35:21]
    io.txd <= _io_txd_T @[Uart.scala 35:10]
    node _T = eq(cntReg, UInt<1>("h0")) @[Uart.scala 37:15]
    when _T : @[Uart.scala 37:24]
      cntReg <= UInt<13>("h1457") @[Uart.scala 39:12]
      node _T_1 = neq(bitsReg, UInt<1>("h0")) @[Uart.scala 40:18]
      when _T_1 : @[Uart.scala 40:27]
        node shift = shr(shiftReg, 1) @[Uart.scala 41:28]
        node _shiftReg_T = bits(shift, 9, 0) @[Uart.scala 42:33]
        node _shiftReg_T_1 = cat(UInt<1>("h1"), _shiftReg_T) @[Cat.scala 33:92]
        shiftReg <= _shiftReg_T_1 @[Uart.scala 42:16]
        node _bitsReg_T = sub(bitsReg, UInt<1>("h1")) @[Uart.scala 43:26]
        node _bitsReg_T_1 = tail(_bitsReg_T, 1) @[Uart.scala 43:26]
        bitsReg <= _bitsReg_T_1 @[Uart.scala 43:15]
      else :
        when io.channel.valid : @[Uart.scala 45:30]
          node _shiftReg_T_2 = cat(UInt<2>("h3"), io.channel.bits) @[Cat.scala 33:92]
          node _shiftReg_T_3 = cat(_shiftReg_T_2, UInt<1>("h0")) @[Cat.scala 33:92]
          shiftReg <= _shiftReg_T_3 @[Uart.scala 46:18]
          bitsReg <= UInt<4>("hb") @[Uart.scala 47:17]
        else :
          shiftReg <= UInt<11>("h7ff") @[Uart.scala 49:18]
    else :
      node _cntReg_T = sub(cntReg, UInt<1>("h1")) @[Uart.scala 54:22]
      node _cntReg_T_1 = tail(_cntReg_T, 1) @[Uart.scala 54:22]
      cntReg <= _cntReg_T_1 @[Uart.scala 54:12]


  module Rx :
    input clock : Clock
    input reset : Reset
    output io : { flip rxd : UInt<1>, channel : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}}

    reg rxReg_REG : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Uart.scala 76:30]
    rxReg_REG <= io.rxd @[Uart.scala 76:30]
    reg rxReg : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Uart.scala 76:22]
    rxReg <= rxReg_REG @[Uart.scala 76:22]
    reg shiftReg : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Uart.scala 78:25]
    reg cntReg : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[Uart.scala 79:23]
    reg bitsReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 80:24]
    reg valReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 81:23]
    node _T = neq(cntReg, UInt<1>("h0")) @[Uart.scala 83:15]
    when _T : @[Uart.scala 83:24]
      node _cntReg_T = sub(cntReg, UInt<1>("h1")) @[Uart.scala 84:22]
      node _cntReg_T_1 = tail(_cntReg_T, 1) @[Uart.scala 84:22]
      cntReg <= _cntReg_T_1 @[Uart.scala 84:12]
    else :
      node _T_1 = neq(bitsReg, UInt<1>("h0")) @[Uart.scala 85:22]
      when _T_1 : @[Uart.scala 85:31]
        cntReg <= UInt<13>("h1457") @[Uart.scala 86:12]
        node _shiftReg_T = shr(shiftReg, 1) @[Uart.scala 87:37]
        node _shiftReg_T_1 = cat(rxReg, _shiftReg_T) @[Cat.scala 33:92]
        shiftReg <= _shiftReg_T_1 @[Uart.scala 87:14]
        node _bitsReg_T = sub(bitsReg, UInt<1>("h1")) @[Uart.scala 88:24]
        node _bitsReg_T_1 = tail(_bitsReg_T, 1) @[Uart.scala 88:24]
        bitsReg <= _bitsReg_T_1 @[Uart.scala 88:13]
        node _T_2 = eq(bitsReg, UInt<1>("h1")) @[Uart.scala 90:18]
        when _T_2 : @[Uart.scala 90:27]
          valReg <= UInt<1>("h1") @[Uart.scala 91:14]
      else :
        node _T_3 = eq(rxReg, UInt<1>("h0")) @[Uart.scala 93:20]
        when _T_3 : @[Uart.scala 93:29]
          cntReg <= UInt<13>("h1e84") @[Uart.scala 94:12]
          bitsReg <= UInt<4>("h8") @[Uart.scala 95:13]
    node _T_4 = and(valReg, io.channel.ready) @[Uart.scala 98:15]
    when _T_4 : @[Uart.scala 98:36]
      valReg <= UInt<1>("h0") @[Uart.scala 99:12]
    io.channel.bits <= shiftReg @[Uart.scala 102:19]
    io.channel.valid <= valReg @[Uart.scala 103:20]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<7>}

    cmem ram : UInt<8> [64] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<6>("h3f")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<6>("h3f")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<7>("h40"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<7>}

    cmem ram : UInt<8> [64] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<6>("h3f")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<6>("h3f")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<7>("h40"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module MemoryMappedUart :
    input clock : Clock
    input reset : Reset
    output io : { flip port : { read : UInt<1>, write : UInt<1>, addr : UInt<32>, wrData : UInt<32>, flip rdData : UInt<32>}, pins : { tx : UInt<1>, flip rx : UInt<1>}}

    inst transmitter of Tx @[MemoryMappedUart.scala 61:27]
    transmitter.clock <= clock
    transmitter.reset <= reset
    inst receiver of Rx @[MemoryMappedUart.scala 62:24]
    receiver.clock <= clock
    receiver.reset <= reset
    inst txBuffer of Queue @[MemoryMappedUart.scala 65:24]
    txBuffer.clock <= clock
    txBuffer.reset <= reset
    inst rxBuffer of Queue_1 @[MemoryMappedUart.scala 66:24]
    rxBuffer.clock <= clock
    rxBuffer.reset <= reset
    transmitter.io.channel <= txBuffer.io.deq @[MemoryMappedUart.scala 69:19]
    rxBuffer.io.enq <= receiver.io.channel @[MemoryMappedUart.scala 70:23]
    node _hadDataReadRequest_T = eq(io.port.addr, UInt<1>("h0")) @[Bus.scala 82:30]
    node _hadDataReadRequest_T_1 = and(io.port.read, _hadDataReadRequest_T) @[Bus.scala 82:17]
    reg hadDataReadRequest : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MemoryMappedUart.scala 74:12]
    hadDataReadRequest <= _hadDataReadRequest_T_1 @[MemoryMappedUart.scala 74:12]
    txBuffer.io.enq.bits <= io.port.wrData @[MemoryMappedUart.scala 80:24]
    node _txBuffer_io_enq_valid_T = eq(io.port.addr, UInt<1>("h0")) @[Bus.scala 75:31]
    node _txBuffer_io_enq_valid_T_1 = and(io.port.write, _txBuffer_io_enq_valid_T) @[Bus.scala 75:18]
    txBuffer.io.enq.valid <= _txBuffer_io_enq_valid_T_1 @[MemoryMappedUart.scala 81:25]
    rxBuffer.io.deq.ready <= hadDataReadRequest @[MemoryMappedUart.scala 84:25]
    io.pins.tx <= transmitter.io.txd @[MemoryMappedUart.scala 87:14]
    receiver.io.rxd <= io.pins.rx @[MemoryMappedUart.scala 88:19]
    node _io_port_rdData_T = cat(rxBuffer.io.deq.valid, txBuffer.io.enq.ready) @[MemoryMappedUart.scala 94:27]
    node _io_port_rdData_T_1 = mux(hadDataReadRequest, rxBuffer.io.deq.bits, _io_port_rdData_T) @[MemoryMappedUart.scala 91:24]
    io.port.rdData <= _io_port_rdData_T_1 @[MemoryMappedUart.scala 91:18]

  module SevenSegmentDecoder :
    input clock : Clock
    input reset : Reset
    output io : { flip in : UInt<8>, out : UInt<7>}

    wire decoding_table : UInt<8>[96] @[SevenSegmentDecoder.scala 18:29]
    decoding_table[0] <= UInt<1>("h0") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[1] <= UInt<8>("h86") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[2] <= UInt<6>("h22") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[3] <= UInt<7>("h7e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[4] <= UInt<7>("h6d") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[5] <= UInt<8>("hd2") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[6] <= UInt<7>("h46") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[7] <= UInt<6>("h20") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[8] <= UInt<6>("h29") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[9] <= UInt<4>("hb") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[10] <= UInt<6>("h21") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[11] <= UInt<7>("h70") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[12] <= UInt<5>("h10") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[13] <= UInt<7>("h40") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[14] <= UInt<8>("h80") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[15] <= UInt<7>("h52") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[16] <= UInt<6>("h3f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[17] <= UInt<3>("h6") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[18] <= UInt<7>("h5b") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[19] <= UInt<7>("h4f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[20] <= UInt<7>("h66") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[21] <= UInt<7>("h6d") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[22] <= UInt<7>("h7d") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[23] <= UInt<3>("h7") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[24] <= UInt<7>("h7f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[25] <= UInt<7>("h6f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[26] <= UInt<4>("h9") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[27] <= UInt<4>("hd") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[28] <= UInt<7>("h61") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[29] <= UInt<7>("h48") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[30] <= UInt<7>("h43") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[31] <= UInt<8>("hd3") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[32] <= UInt<7>("h5f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[33] <= UInt<7>("h77") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[34] <= UInt<7>("h7c") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[35] <= UInt<6>("h39") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[36] <= UInt<7>("h5e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[37] <= UInt<7>("h79") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[38] <= UInt<7>("h71") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[39] <= UInt<6>("h3d") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[40] <= UInt<7>("h76") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[41] <= UInt<6>("h30") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[42] <= UInt<5>("h1e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[43] <= UInt<7>("h75") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[44] <= UInt<6>("h38") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[45] <= UInt<5>("h15") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[46] <= UInt<6>("h37") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[47] <= UInt<6>("h3f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[48] <= UInt<7>("h73") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[49] <= UInt<7>("h6b") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[50] <= UInt<6>("h33") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[51] <= UInt<7>("h6d") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[52] <= UInt<7>("h78") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[53] <= UInt<6>("h3e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[54] <= UInt<6>("h3e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[55] <= UInt<6>("h2a") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[56] <= UInt<7>("h76") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[57] <= UInt<7>("h6e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[58] <= UInt<7>("h5b") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[59] <= UInt<6>("h39") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[60] <= UInt<7>("h64") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[61] <= UInt<4>("hf") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[62] <= UInt<6>("h23") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[63] <= UInt<4>("h8") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[64] <= UInt<2>("h2") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[65] <= UInt<7>("h5f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[66] <= UInt<7>("h7c") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[67] <= UInt<7>("h58") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[68] <= UInt<7>("h5e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[69] <= UInt<7>("h7b") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[70] <= UInt<7>("h71") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[71] <= UInt<7>("h6f") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[72] <= UInt<7>("h74") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[73] <= UInt<5>("h10") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[74] <= UInt<4>("hc") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[75] <= UInt<7>("h75") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[76] <= UInt<6>("h30") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[77] <= UInt<5>("h14") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[78] <= UInt<7>("h54") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[79] <= UInt<7>("h5c") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[80] <= UInt<7>("h73") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[81] <= UInt<7>("h67") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[82] <= UInt<7>("h50") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[83] <= UInt<7>("h6d") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[84] <= UInt<7>("h78") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[85] <= UInt<5>("h1c") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[86] <= UInt<5>("h1c") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[87] <= UInt<5>("h14") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[88] <= UInt<7>("h76") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[89] <= UInt<7>("h6e") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[90] <= UInt<7>("h5b") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[91] <= UInt<7>("h46") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[92] <= UInt<6>("h30") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[93] <= UInt<7>("h70") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[94] <= UInt<1>("h1") @[SevenSegmentDecoder.scala 18:29]
    decoding_table[95] <= UInt<1>("h0") @[SevenSegmentDecoder.scala 18:29]
    node _io_out_T = sub(io.in, UInt<6>("h20")) @[SevenSegmentDecoder.scala 118:32]
    node _io_out_T_1 = tail(_io_out_T, 1) @[SevenSegmentDecoder.scala 118:32]
    node _io_out_T_2 = bits(_io_out_T_1, 6, 0)
    io.out <= decoding_table[_io_out_T_2] @[SevenSegmentDecoder.scala 118:8]

  module MemoryMappedDisplay :
    input clock : Clock
    input reset : Reset
    output io : { flip port : { read : UInt<1>, write : UInt<1>, addr : UInt<32>, wrData : UInt<32>, flip rdData : UInt<32>}, display : { seg : UInt<7>, an : UInt<4>}}

    node _relative_address_T = sub(io.port.addr, UInt<5>("h10")) @[MemoryMappedDisplay.scala 19:39]
    node relative_address = tail(_relative_address_T, 1) @[MemoryMappedDisplay.scala 19:39]
    inst sevSegDecoder of SevenSegmentDecoder @[MemoryMappedDisplay.scala 20:29]
    sevSegDecoder.clock <= clock
    sevSegDecoder.reset <= reset
    reg select : UInt<4>, clock with :
      reset => (reset, UInt<4>("h1")) @[MemoryMappedDisplay.scala 21:23]
    wire rdData : UInt<8> @[MemoryMappedDisplay.scala 22:27]
    rdData <= UInt<8>("h0") @[MemoryMappedDisplay.scala 22:27]
    wire _display_reg_WIRE : UInt<8>[16] @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[0] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[1] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[2] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[3] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[4] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[5] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[6] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[7] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[8] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[9] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[10] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[11] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[12] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[13] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[14] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    _display_reg_WIRE[15] <= UInt<8>("h0") @[MemoryMappedDisplay.scala 25:37]
    reg display_reg : UInt<8>[16], clock with :
      reset => (reset, _display_reg_WIRE) @[MemoryMappedDisplay.scala 25:28]
    reg display_shift_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[MemoryMappedDisplay.scala 27:34]
    io.port.rdData <= UInt<1>("h0") @[MemoryMappedDisplay.scala 30:18]
    reg tick_counter_multiplex_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MemoryMappedDisplay.scala 38:43]
    node _tick_counter_multiplex_reg_T = add(tick_counter_multiplex_reg, UInt<1>("h1")) @[MemoryMappedDisplay.scala 39:60]
    node _tick_counter_multiplex_reg_T_1 = tail(_tick_counter_multiplex_reg_T, 1) @[MemoryMappedDisplay.scala 39:60]
    tick_counter_multiplex_reg <= _tick_counter_multiplex_reg_T_1 @[MemoryMappedDisplay.scala 39:30]
    node tick_multiplexing = eq(tick_counter_multiplex_reg, UInt<17>("h1869f")) @[MemoryMappedDisplay.scala 42:54]
    when tick_multiplexing : @[MemoryMappedDisplay.scala 44:27]
      tick_counter_multiplex_reg <= UInt<1>("h0") @[MemoryMappedDisplay.scala 45:32]
      node _select_T = bits(select, 0, 0) @[MemoryMappedDisplay.scala 46:21]
      node _select_T_1 = bits(select, 3, 1) @[MemoryMappedDisplay.scala 46:34]
      node _select_T_2 = cat(_select_T, _select_T_1) @[MemoryMappedDisplay.scala 46:25]
      select <= _select_T_2 @[MemoryMappedDisplay.scala 46:12]
    reg tick_counter_shift_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[MemoryMappedDisplay.scala 50:39]
    node _tick_counter_shift_reg_T = add(tick_counter_shift_reg, UInt<1>("h1")) @[MemoryMappedDisplay.scala 51:52]
    node _tick_counter_shift_reg_T_1 = tail(_tick_counter_shift_reg_T, 1) @[MemoryMappedDisplay.scala 51:52]
    tick_counter_shift_reg <= _tick_counter_shift_reg_T_1 @[MemoryMappedDisplay.scala 51:26]
    node tick_shift = eq(tick_counter_shift_reg, UInt<25>("h17d783f")) @[MemoryMappedDisplay.scala 54:43]
    when tick_shift : @[MemoryMappedDisplay.scala 56:20]
      tick_counter_shift_reg <= UInt<1>("h0") @[MemoryMappedDisplay.scala 57:28]
      node _T = eq(display_shift_reg, UInt<4>("hf")) @[MemoryMappedDisplay.scala 58:28]
      when _T : @[MemoryMappedDisplay.scala 58:38]
        display_shift_reg <= UInt<1>("h0") @[MemoryMappedDisplay.scala 59:25]
      else :
        node _display_shift_reg_T = add(display_shift_reg, UInt<1>("h1")) @[MemoryMappedDisplay.scala 61:46]
        node _display_shift_reg_T_1 = tail(_display_shift_reg_T, 1) @[MemoryMappedDisplay.scala 61:46]
        display_shift_reg <= _display_shift_reg_T_1 @[MemoryMappedDisplay.scala 61:25]
    node _T_1 = lt(relative_address, UInt<5>("h10")) @[MemoryMappedDisplay.scala 66:43]
    node _T_2 = and(io.port.write, _T_1) @[MemoryMappedDisplay.scala 66:22]
    when _T_2 : @[MemoryMappedDisplay.scala 66:54]
      node _T_3 = bits(relative_address, 3, 0)
      display_reg[_T_3] <= io.port.wrData @[MemoryMappedDisplay.scala 67:35]
    node _T_4 = lt(relative_address, UInt<5>("h10")) @[MemoryMappedDisplay.scala 71:42]
    node _T_5 = and(io.port.read, _T_4) @[MemoryMappedDisplay.scala 71:21]
    when _T_5 : @[MemoryMappedDisplay.scala 71:53]
      node _rdData_T = bits(relative_address, 3, 0)
      rdData <= display_reg[_rdData_T] @[MemoryMappedDisplay.scala 72:12]
    reg io_port_rdData_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_port_rdData_REG) @[MemoryMappedDisplay.scala 75:36]
    io_port_rdData_REG <= rdData @[MemoryMappedDisplay.scala 75:36]
    reg io_port_rdData_REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), io_port_rdData_REG_1) @[MemoryMappedDisplay.scala 75:28]
    io_port_rdData_REG_1 <= io_port_rdData_REG @[MemoryMappedDisplay.scala 75:28]
    io.port.rdData <= io_port_rdData_REG_1 @[MemoryMappedDisplay.scala 75:18]
    sevSegDecoder.io.in <= UInt<1>("h0") @[MemoryMappedDisplay.scala 79:23]
    node _T_6 = eq(UInt<4>("h8"), select) @[MemoryMappedDisplay.scala 80:18]
    when _T_6 : @[MemoryMappedDisplay.scala 80:18]
      node _sevSegDecoder_io_in_T = add(display_shift_reg, UInt<1>("h0")) @[MemoryMappedDisplay.scala 81:75]
      node _sevSegDecoder_io_in_T_1 = tail(_sevSegDecoder_io_in_T, 1) @[MemoryMappedDisplay.scala 81:75]
      node _sevSegDecoder_io_in_T_2 = bits(_sevSegDecoder_io_in_T_1, 3, 0) @[MemoryMappedDisplay.scala 81:81]
      sevSegDecoder.io.in <= display_reg[_sevSegDecoder_io_in_T_2] @[MemoryMappedDisplay.scala 81:41]
    else :
      node _T_7 = eq(UInt<3>("h4"), select) @[MemoryMappedDisplay.scala 80:18]
      when _T_7 : @[MemoryMappedDisplay.scala 80:18]
        node _sevSegDecoder_io_in_T_3 = add(display_shift_reg, UInt<1>("h1")) @[MemoryMappedDisplay.scala 82:75]
        node _sevSegDecoder_io_in_T_4 = tail(_sevSegDecoder_io_in_T_3, 1) @[MemoryMappedDisplay.scala 82:75]
        node _sevSegDecoder_io_in_T_5 = bits(_sevSegDecoder_io_in_T_4, 3, 0) @[MemoryMappedDisplay.scala 82:81]
        sevSegDecoder.io.in <= display_reg[_sevSegDecoder_io_in_T_5] @[MemoryMappedDisplay.scala 82:41]
      else :
        node _T_8 = eq(UInt<2>("h2"), select) @[MemoryMappedDisplay.scala 80:18]
        when _T_8 : @[MemoryMappedDisplay.scala 80:18]
          node _sevSegDecoder_io_in_T_6 = add(display_shift_reg, UInt<2>("h2")) @[MemoryMappedDisplay.scala 83:75]
          node _sevSegDecoder_io_in_T_7 = tail(_sevSegDecoder_io_in_T_6, 1) @[MemoryMappedDisplay.scala 83:75]
          node _sevSegDecoder_io_in_T_8 = bits(_sevSegDecoder_io_in_T_7, 3, 0) @[MemoryMappedDisplay.scala 83:81]
          sevSegDecoder.io.in <= display_reg[_sevSegDecoder_io_in_T_8] @[MemoryMappedDisplay.scala 83:41]
        else :
          node _T_9 = eq(UInt<1>("h1"), select) @[MemoryMappedDisplay.scala 80:18]
          when _T_9 : @[MemoryMappedDisplay.scala 80:18]
            node _sevSegDecoder_io_in_T_9 = add(display_shift_reg, UInt<2>("h3")) @[MemoryMappedDisplay.scala 84:75]
            node _sevSegDecoder_io_in_T_10 = tail(_sevSegDecoder_io_in_T_9, 1) @[MemoryMappedDisplay.scala 84:75]
            node _sevSegDecoder_io_in_T_11 = bits(_sevSegDecoder_io_in_T_10, 3, 0) @[MemoryMappedDisplay.scala 84:81]
            sevSegDecoder.io.in <= display_reg[_sevSegDecoder_io_in_T_11] @[MemoryMappedDisplay.scala 84:41]
    node _io_display_seg_T = not(sevSegDecoder.io.out) @[MemoryMappedDisplay.scala 88:21]
    io.display.seg <= _io_display_seg_T @[MemoryMappedDisplay.scala 88:18]
    node _io_display_an_T = not(select) @[MemoryMappedDisplay.scala 89:20]
    io.display.an <= _io_display_an_T @[MemoryMappedDisplay.scala 89:17]

  module MemoryMappedIO :
    input clock : Clock
    input reset : Reset
    output io : { flip address : UInt<32>, flip dataIn : UInt<32>, flip writeEnable : UInt<1>, flip readEnable : UInt<1>, flip switches : UInt<16>, dataOut : UInt<32>, leds : UInt<16>, display : { seg : UInt<7>, an : UInt<4>}}

    inst leds of MemoryMappedLeds @[MemoryMappedIO.scala 37:20]
    leds.clock <= clock
    leds.reset <= reset
    inst sw of MemoryMappedSwitches @[MemoryMappedIO.scala 38:18]
    sw.clock <= clock
    sw.reset <= reset
    inst uart of MemoryMappedUart @[MemoryMappedIO.scala 39:20]
    uart.clock <= clock
    uart.reset <= reset
    inst display of MemoryMappedDisplay @[MemoryMappedIO.scala 44:23]
    display.clock <= clock
    display.reset <= reset
    node _address_io_T = sub(io.address, UInt<11>("h400")) @[MemoryMappedIO.scala 47:32]
    node _address_io_T_1 = tail(_address_io_T, 1) @[MemoryMappedIO.scala 47:32]
    node address_io = bits(_address_io_T_1, 7, 0) @[MemoryMappedIO.scala 47:53]
    node _is_led_T = eq(address_io, UInt<6>("h30")) @[MemoryMappedIO.scala 51:27]
    node _is_led_T_1 = leq(UInt<7>("h40"), address_io) @[MemoryMappedIO.scala 51:75]
    node _is_led_T_2 = add(UInt<7>("h40"), UInt<8>("h10")) @[MemoryMappedIO.scala 51:128]
    node _is_led_T_3 = tail(_is_led_T_2, 1) @[MemoryMappedIO.scala 51:128]
    node _is_led_T_4 = lt(address_io, _is_led_T_3) @[MemoryMappedIO.scala 51:103]
    node _is_led_T_5 = and(_is_led_T_1, _is_led_T_4) @[MemoryMappedIO.scala 51:89]
    node is_led = or(_is_led_T, _is_led_T_5) @[MemoryMappedIO.scala 51:49]
    node _leds_io_port_write_T = and(io.writeEnable, is_led) @[MemoryMappedIO.scala 52:40]
    leds.io.port.write <= _leds_io_port_write_T @[MemoryMappedIO.scala 52:22]
    node _leds_io_port_read_T = and(io.readEnable, is_led) @[MemoryMappedIO.scala 53:38]
    leds.io.port.read <= _leds_io_port_read_T @[MemoryMappedIO.scala 53:21]
    leds.io.port.addr <= address_io @[MemoryMappedIO.scala 54:21]
    node _leds_io_port_wrData_T = bits(io.dataIn, 15, 0) @[MemoryMappedIO.scala 55:35]
    leds.io.port.wrData <= _leds_io_port_wrData_T @[MemoryMappedIO.scala 55:23]
    io.leds <= leds.io.pins @[MemoryMappedIO.scala 56:11]
    sw.io.port.write is invalid @[MemoryMappedIO.scala 59:20]
    sw.io.port.read is invalid @[MemoryMappedIO.scala 60:19]
    sw.io.port.addr is invalid @[MemoryMappedIO.scala 61:19]
    sw.io.port.wrData is invalid @[MemoryMappedIO.scala 62:21]
    sw.io.pins <= io.switches @[MemoryMappedIO.scala 63:14]
    node _is_uart_T = eq(address_io, UInt<1>("h0")) @[MemoryMappedIO.scala 66:28]
    node _is_uart_T_1 = eq(address_io, UInt<3>("h4")) @[MemoryMappedIO.scala 66:69]
    node is_uart = or(_is_uart_T, _is_uart_T_1) @[MemoryMappedIO.scala 66:55]
    node _uart_io_port_write_T = and(io.writeEnable, is_uart) @[MemoryMappedIO.scala 67:40]
    uart.io.port.write <= _uart_io_port_write_T @[MemoryMappedIO.scala 67:22]
    node _uart_io_port_read_T = and(io.readEnable, is_uart) @[MemoryMappedIO.scala 68:38]
    uart.io.port.read <= _uart_io_port_read_T @[MemoryMappedIO.scala 68:21]
    uart.io.port.addr <= address_io @[MemoryMappedIO.scala 69:21]
    uart.io.port.wrData <= io.dataIn @[MemoryMappedIO.scala 70:23]
    uart.io.pins.rx <= UInt<1>("h0") @[MemoryMappedIO.scala 71:19]
    node _is_display_T = leq(UInt<5>("h10"), address_io) @[MemoryMappedIO.scala 74:42]
    node _is_display_T_1 = add(UInt<5>("h10"), UInt<8>("h10")) @[MemoryMappedIO.scala 74:96]
    node _is_display_T_2 = tail(_is_display_T_1, 1) @[MemoryMappedIO.scala 74:96]
    node _is_display_T_3 = lt(address_io, _is_display_T_2) @[MemoryMappedIO.scala 74:72]
    node is_display = and(_is_display_T, _is_display_T_3) @[MemoryMappedIO.scala 74:57]
    node _display_io_port_write_T = and(io.writeEnable, is_display) @[MemoryMappedIO.scala 75:43]
    display.io.port.write <= _display_io_port_write_T @[MemoryMappedIO.scala 75:25]
    node _display_io_port_read_T = and(io.readEnable, is_display) @[MemoryMappedIO.scala 76:41]
    display.io.port.read <= _display_io_port_read_T @[MemoryMappedIO.scala 76:24]
    display.io.port.addr <= address_io @[MemoryMappedIO.scala 77:24]
    display.io.port.wrData <= io.dataIn @[MemoryMappedIO.scala 78:26]
    io.display.seg <= display.io.display.seg @[MemoryMappedIO.scala 79:18]
    io.display.an <= display.io.display.an @[MemoryMappedIO.scala 80:17]
    wire dataOut : UInt<32> @[MemoryMappedIO.scala 83:28]
    dataOut <= UInt<32>("h0") @[MemoryMappedIO.scala 83:28]
    reg REG : UInt, clock with :
      reset => (UInt<1>("h0"), REG) @[MemoryMappedIO.scala 84:25]
    REG <= address_io @[MemoryMappedIO.scala 84:25]
    reg REG_1 : UInt, clock with :
      reset => (UInt<1>("h0"), REG_1) @[MemoryMappedIO.scala 84:17]
    REG_1 <= REG @[MemoryMappedIO.scala 84:17]
    node _T = eq(UInt<6>("h30"), REG_1) @[MemoryMappedIO.scala 84:40]
    node _T_1 = eq(UInt<7>("h40"), REG_1) @[MemoryMappedIO.scala 84:40]
    node _T_2 = or(_T, _T_1) @[MemoryMappedIO.scala 84:40]
    when _T_2 : @[MemoryMappedIO.scala 84:40]
      dataOut <= leds.io.port.rdData @[MemoryMappedIO.scala 86:15]
    else :
      node _T_3 = eq(UInt<8>("h90"), REG_1) @[MemoryMappedIO.scala 84:40]
      when _T_3 : @[MemoryMappedIO.scala 84:40]
        dataOut <= sw.io.port.rdData @[MemoryMappedIO.scala 89:15]
      else :
        node _T_4 = eq(UInt<1>("h0"), REG_1) @[MemoryMappedIO.scala 84:40]
        node _T_5 = eq(UInt<3>("h4"), REG_1) @[MemoryMappedIO.scala 84:40]
        node _T_6 = or(_T_4, _T_5) @[MemoryMappedIO.scala 84:40]
        when _T_6 : @[MemoryMappedIO.scala 84:40]
          skip
    reg REG_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_2) @[MemoryMappedIO.scala 95:23]
    REG_2 <= io.readEnable @[MemoryMappedIO.scala 95:23]
    reg REG_3 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG_3) @[MemoryMappedIO.scala 95:15]
    REG_3 <= REG_2 @[MemoryMappedIO.scala 95:15]
    when REG_3 : @[MemoryMappedIO.scala 95:41]
      io.dataOut <= dataOut @[MemoryMappedIO.scala 96:16]
    else :
      io.dataOut <= UInt<1>("h0") @[MemoryMappedIO.scala 98:16]


  module MEMStage :
    input clock : Clock
    input reset : Reset
    output io : { EXtoMEM : { flip register_write_enable_EXtoMEM : UInt<1>, flip write_back_select_EXtoMEM : UInt<1>, flip rd_EXtoMEM : UInt<5>, flip address_is_io_EXtoMEM : UInt<1>, flip alu_result_EXtoMEM : UInt<32>, flip memory_write_data_EXtoMEM : UInt<32>, flip data_memory_write_enable_EXtoMEM : UInt<1>, flip alu_operation_select_EXtoMEM : UInt<8>, flip io_memory_write_enable_EXtoMEM : UInt<1>}, MEMtoWB : { alu_result_MEMtoWB : UInt<32>, register_write_enable_MEMtoWB : UInt<1>, write_back_select_MEMtoWB : UInt<1>, rd_MEMtoWB : UInt<5>, address_is_io_MEMtoWB : UInt<1>, data_memory_read_MEMtoWB : UInt<32>, io_memory_read_MEMtoWB : UInt<32>}, flip switches : UInt<16>, leds : UInt<16>, display : { seg : UInt<7>, an : UInt<4>}}

    inst dataMem of DataMemory @[MEMStage.scala 53:23]
    dataMem.clock <= clock
    dataMem.reset <= reset
    inst MemoryMappedIO of MemoryMappedIO @[MEMStage.scala 56:30]
    MemoryMappedIO.clock <= clock
    MemoryMappedIO.reset <= reset
    MemoryMappedIO.io.writeEnable <= io.EXtoMEM.io_memory_write_enable_EXtoMEM @[MEMStage.scala 57:33]
    MemoryMappedIO.io.dataIn <= io.EXtoMEM.memory_write_data_EXtoMEM @[MEMStage.scala 58:28]
    MemoryMappedIO.io.address <= io.EXtoMEM.alu_result_EXtoMEM @[MEMStage.scala 59:29]
    node _MemoryMappedIO_io_readEnable_T = eq(io.EXtoMEM.io_memory_write_enable_EXtoMEM, UInt<1>("h0")) @[MEMStage.scala 60:35]
    MemoryMappedIO.io.readEnable <= _MemoryMappedIO_io_readEnable_T @[MEMStage.scala 60:32]
    io.MEMtoWB.io_memory_read_MEMtoWB <= MemoryMappedIO.io.dataOut @[MEMStage.scala 61:37]
    io.leds <= MemoryMappedIO.io.leds @[MEMStage.scala 63:11]
    MemoryMappedIO.io.switches <= io.switches @[MEMStage.scala 64:30]
    io.display.seg <= MemoryMappedIO.io.display.seg @[MEMStage.scala 65:18]
    io.display.an <= MemoryMappedIO.io.display.an @[MEMStage.scala 66:17]
    reg io_MEMtoWB_alu_result_MEMtoWB_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_MEMtoWB_alu_result_MEMtoWB_REG) @[MEMStage.scala 70:53]
    io_MEMtoWB_alu_result_MEMtoWB_REG <= io.EXtoMEM.alu_result_EXtoMEM @[MEMStage.scala 70:53]
    io.MEMtoWB.alu_result_MEMtoWB <= io_MEMtoWB_alu_result_MEMtoWB_REG @[MEMStage.scala 70:43]
    reg io_MEMtoWB_register_write_enable_MEMtoWB_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_MEMtoWB_register_write_enable_MEMtoWB_REG) @[MEMStage.scala 71:53]
    io_MEMtoWB_register_write_enable_MEMtoWB_REG <= io.EXtoMEM.register_write_enable_EXtoMEM @[MEMStage.scala 71:53]
    io.MEMtoWB.register_write_enable_MEMtoWB <= io_MEMtoWB_register_write_enable_MEMtoWB_REG @[MEMStage.scala 71:43]
    reg io_MEMtoWB_write_back_select_MEMtoWB_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_MEMtoWB_write_back_select_MEMtoWB_REG) @[MEMStage.scala 72:53]
    io_MEMtoWB_write_back_select_MEMtoWB_REG <= io.EXtoMEM.write_back_select_EXtoMEM @[MEMStage.scala 72:53]
    io.MEMtoWB.write_back_select_MEMtoWB <= io_MEMtoWB_write_back_select_MEMtoWB_REG @[MEMStage.scala 72:43]
    reg io_MEMtoWB_rd_MEMtoWB_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_MEMtoWB_rd_MEMtoWB_REG) @[MEMStage.scala 73:53]
    io_MEMtoWB_rd_MEMtoWB_REG <= io.EXtoMEM.rd_EXtoMEM @[MEMStage.scala 73:53]
    io.MEMtoWB.rd_MEMtoWB <= io_MEMtoWB_rd_MEMtoWB_REG @[MEMStage.scala 73:43]
    reg io_MEMtoWB_address_is_io_MEMtoWB_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_MEMtoWB_address_is_io_MEMtoWB_REG) @[MEMStage.scala 74:53]
    io_MEMtoWB_address_is_io_MEMtoWB_REG <= io.EXtoMEM.address_is_io_EXtoMEM @[MEMStage.scala 74:53]
    io.MEMtoWB.address_is_io_MEMtoWB <= io_MEMtoWB_address_is_io_MEMtoWB_REG @[MEMStage.scala 74:43]
    dataMem.io.addr <= io.EXtoMEM.alu_result_EXtoMEM @[MEMStage.scala 77:19]
    dataMem.io.dataIn <= io.EXtoMEM.memory_write_data_EXtoMEM @[MEMStage.scala 78:21]
    dataMem.io.enableWrite <= io.EXtoMEM.data_memory_write_enable_EXtoMEM @[MEMStage.scala 79:26]
    dataMem.io.alu_operation_select_EXtoMEM <= io.EXtoMEM.alu_operation_select_EXtoMEM @[MEMStage.scala 80:43]
    io.MEMtoWB.data_memory_read_MEMtoWB <= dataMem.io.dataOut @[MEMStage.scala 81:39]

  module WBStage :
    input clock : Clock
    input reset : Reset
    output io : { MEMtoWB : { flip alu_result_MEMtoWB : UInt<32>, flip register_write_enable_MEMtoWB : UInt<1>, flip write_back_select_MEMtoWB : UInt<1>, flip rd_MEMtoWB : UInt<5>, flip address_is_io_MEMtoWB : UInt<1>, flip data_memory_read_MEMtoWB : UInt<32>, flip io_memory_read_MEMtoWB : UInt<32>}, WBtoEX : { regfile_write_data_WBtoEX : UInt<32>, regfile_write_enable_WBtoEX : UInt<1>, rd_WBtoEX : UInt<5>}}

    reg alu_result : UInt, clock with :
      reset => (UInt<1>("h0"), alu_result) @[WBStage.scala 29:45]
    alu_result <= io.MEMtoWB.alu_result_MEMtoWB @[WBStage.scala 29:45]
    reg write_back_select : UInt<1>, clock with :
      reset => (UInt<1>("h0"), write_back_select) @[WBStage.scala 30:45]
    write_back_select <= io.MEMtoWB.write_back_select_MEMtoWB @[WBStage.scala 30:45]
    reg address_is_io : UInt<1>, clock with :
      reset => (UInt<1>("h0"), address_is_io) @[WBStage.scala 31:45]
    address_is_io <= io.MEMtoWB.address_is_io_MEMtoWB @[WBStage.scala 31:45]
    reg io_WBtoEX_regfile_write_enable_WBtoEX_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_WBtoEX_regfile_write_enable_WBtoEX_REG) @[WBStage.scala 32:51]
    io_WBtoEX_regfile_write_enable_WBtoEX_REG <= io.MEMtoWB.register_write_enable_MEMtoWB @[WBStage.scala 32:51]
    io.WBtoEX.regfile_write_enable_WBtoEX <= io_WBtoEX_regfile_write_enable_WBtoEX_REG @[WBStage.scala 32:41]
    reg io_WBtoEX_rd_WBtoEX_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_WBtoEX_rd_WBtoEX_REG) @[WBStage.scala 33:51]
    io_WBtoEX_rd_WBtoEX_REG <= io.MEMtoWB.rd_MEMtoWB @[WBStage.scala 33:51]
    io.WBtoEX.rd_WBtoEX <= io_WBtoEX_rd_WBtoEX_REG @[WBStage.scala 33:41]
    when write_back_select : @[WBStage.scala 36:26]
      node _io_WBtoEX_regfile_write_data_WBtoEX_T = mux(address_is_io, io.MEMtoWB.io_memory_read_MEMtoWB, io.MEMtoWB.data_memory_read_MEMtoWB) @[WBStage.scala 37:47]
      io.WBtoEX.regfile_write_data_WBtoEX <= _io_WBtoEX_regfile_write_data_WBtoEX_T @[WBStage.scala 37:41]
    else :
      io.WBtoEX.regfile_write_data_WBtoEX <= alu_result @[WBStage.scala 39:41]


  module ProcessorTopLevel :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip sw : UInt<16>, LEDs : UInt<16>, display : { seg : UInt<7>, an : UInt<4>}}

    inst IFD of IFDStage @[ProcessorTopLevel.scala 20:19]
    IFD.clock <= clock
    IFD.reset <= reset
    inst EX of EXStage @[ProcessorTopLevel.scala 21:18]
    EX.clock <= clock
    EX.reset <= reset
    inst MEM of MEMStage @[ProcessorTopLevel.scala 22:20]
    MEM.clock <= clock
    MEM.reset <= reset
    inst WB of WBStage @[ProcessorTopLevel.scala 23:19]
    WB.clock <= clock
    WB.reset <= reset
    EX.io.IFDtoEX.write_memory_enable_IFDtoEX <= IFD.io.IFDtoEX.write_memory_enable_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.MemReadEnable_IFDtoEX <= IFD.io.IFDtoEX.MemReadEnable_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.write_back_select_IFDtoEX <= IFD.io.IFDtoEX.write_back_select_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.register_write_enable_IFDtoEX <= IFD.io.IFDtoEX.register_write_enable_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.alu_operation_select_IFDtoEX <= IFD.io.IFDtoEX.alu_operation_select_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.alu_op2mux_select_IFDtoEX <= IFD.io.IFDtoEX.alu_op2mux_select_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.immediate_IFDtoEX <= IFD.io.IFDtoEX.immediate_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.IFDtoEX.pc_IFDtoEX <= IFD.io.IFDtoEX.pc_IFDtoEX @[ProcessorTopLevel.scala 26:18]
    EX.io.decoded_instruction_IFDtoEX.opcode <= IFD.io.decoded_instruction_IFDtoEX.opcode @[ProcessorTopLevel.scala 27:38]
    EX.io.decoded_instruction_IFDtoEX.rd <= IFD.io.decoded_instruction_IFDtoEX.rd @[ProcessorTopLevel.scala 27:38]
    EX.io.decoded_instruction_IFDtoEX.rs2 <= IFD.io.decoded_instruction_IFDtoEX.rs2 @[ProcessorTopLevel.scala 27:38]
    EX.io.decoded_instruction_IFDtoEX.rs1 <= IFD.io.decoded_instruction_IFDtoEX.rs1 @[ProcessorTopLevel.scala 27:38]
    IFD.io.EXtoIFD.branch_address_EXtoIFD <= EX.io.EXtoIFD.branch_address_EXtoIFD @[ProcessorTopLevel.scala 28:18]
    IFD.io.EXtoIFD.take_branch_EXtoIFD <= EX.io.EXtoIFD.take_branch_EXtoIFD @[ProcessorTopLevel.scala 28:18]
    MEM.io.EXtoMEM.alu_operation_select_EXtoMEM <= EX.io.EXtoMEM.alu_operation_select_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.address_is_io_EXtoMEM <= EX.io.EXtoMEM.address_is_io_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.io_memory_write_enable_EXtoMEM <= EX.io.EXtoMEM.io_memory_write_enable_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.data_memory_write_enable_EXtoMEM <= EX.io.EXtoMEM.data_memory_write_enable_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.write_back_select_EXtoMEM <= EX.io.EXtoMEM.write_back_select_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.register_write_enable_EXtoMEM <= EX.io.EXtoMEM.register_write_enable_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.rd_EXtoMEM <= EX.io.EXtoMEM.rd_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.memory_write_data_EXtoMEM <= EX.io.EXtoMEM.memory_write_data_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    MEM.io.EXtoMEM.alu_result_EXtoMEM <= EX.io.EXtoMEM.alu_result_EXtoMEM @[ProcessorTopLevel.scala 29:17]
    EX.io.WBtoEX.rd_WBtoEX <= WB.io.WBtoEX.rd_WBtoEX @[ProcessorTopLevel.scala 30:16]
    EX.io.WBtoEX.regfile_write_enable_WBtoEX <= WB.io.WBtoEX.regfile_write_enable_WBtoEX @[ProcessorTopLevel.scala 30:16]
    EX.io.WBtoEX.regfile_write_data_WBtoEX <= WB.io.WBtoEX.regfile_write_data_WBtoEX @[ProcessorTopLevel.scala 30:16]
    WB.io.MEMtoWB.io_memory_read_MEMtoWB <= MEM.io.MEMtoWB.io_memory_read_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    WB.io.MEMtoWB.data_memory_read_MEMtoWB <= MEM.io.MEMtoWB.data_memory_read_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    WB.io.MEMtoWB.address_is_io_MEMtoWB <= MEM.io.MEMtoWB.address_is_io_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    WB.io.MEMtoWB.rd_MEMtoWB <= MEM.io.MEMtoWB.rd_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    WB.io.MEMtoWB.write_back_select_MEMtoWB <= MEM.io.MEMtoWB.write_back_select_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    WB.io.MEMtoWB.register_write_enable_MEMtoWB <= MEM.io.MEMtoWB.register_write_enable_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    WB.io.MEMtoWB.alu_result_MEMtoWB <= MEM.io.MEMtoWB.alu_result_MEMtoWB @[ProcessorTopLevel.scala 31:18]
    io.LEDs <= MEM.io.leds @[ProcessorTopLevel.scala 34:11]
    MEM.io.switches <= io.sw @[ProcessorTopLevel.scala 35:19]
    io.display.seg <= MEM.io.display.seg @[ProcessorTopLevel.scala 36:18]
    io.display.an <= MEM.io.display.an @[ProcessorTopLevel.scala 37:17]

