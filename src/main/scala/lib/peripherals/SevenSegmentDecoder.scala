package lib.peripherals

import chisel3._

class SevenSegmentDecoder extends Module {
  val io = IO(new Bundle {
    val in = Input(UInt(8.W))
    val out = Output(UInt(7.W))
  })

/*
*  Project     Segmented LED Display - ASCII Library
*  @author     David Madison
*  @link       github.com/dmadison/Segmented-LED-Display-ASCII
*  @license    MIT - Copyright (c) 2017 David Madison
 */
// The  table has been modified to fit Chisel semantics
val decoding_table = VecInit(
  "b00000000".U, /* (space) */
  "b10000110".U, /* ! */
  "b00100010".U, /* " */
  "b01111110".U, /* # */
  "b01101101".U, /* $ */
  "b11010010".U, /* % */
  "b01000110".U, /* & */
  "b00100000".U, /* ' */
  "b00101001".U, /* ( */
  "b00001011".U, /* ) */
  "b00100001".U, /* * */
  "b01110000".U, /* + */
  "b00010000".U, /* , */
  "b01000000".U, /* - */
  "b10000000".U, /* . */
  "b01010010".U, /* / */
  "b00111111".U, /* 0 */
  "b00000110".U, /* 1 */
  "b01011011".U, /* 2 */
  "b01001111".U, /* 3 */
  "b01100110".U, /* 4 */
  "b01101101".U, /* 5 */
  "b01111101".U, /* 6 */
  "b00000111".U, /* 7 */
  "b01111111".U, /* 8 */
  "b01101111".U, /* 9 */
  "b00001001".U, /* : */
  "b00001101".U, /* ; */
  "b01100001".U, /* < */
  "b01001000".U, /* = */
  "b01000011".U, /* > */
  "b11010011".U, /* ? */
  "b01011111".U, /* @ */
  "b01110111".U, /* A */
  "b01111100".U, /* B */
  "b00111001".U, /* C */
  "b01011110".U, /* D */
  "b01111001".U, /* E */
  "b01110001".U, /* F */
  "b00111101".U, /* G */
  "b01110110".U, /* H */
  "b00110000".U, /* I */
  "b00011110".U, /* J */
  "b01110101".U, /* K */
  "b00111000".U, /* L */
  "b00010101".U, /* M */
  "b00110111".U, /* N */
  "b00111111".U, /* O */
  "b01110011".U, /* P */
  "b01101011".U, /* Q */
  "b00110011".U, /* R */
  "b01101101".U, /* S */
  "b01111000".U, /* T */
  "b00111110".U, /* U */
  "b00111110".U, /* V */
  "b00101010".U, /* W */
  "b01110110".U, /* X */
  "b01101110".U, /* Y */
  "b01011011".U, /* Z */
  "b00111001".U, /* [ */
  "b01100100".U, /* \ */
  "b00001111".U, /* ] */
  "b00100011".U, /* ^ */
  "b00001000".U, /* _ */
  "b00000010".U, /* ` */
  "b01011111".U, /* a */
  "b01111100".U, /* b */
  "b01011000".U, /* c */
  "b01011110".U, /* d */
  "b01111011".U, /* e */
  "b01110001".U, /* f */
  "b01101111".U, /* g */
  "b01110100".U, /* h */
  "b00010000".U, /* i */
  "b00001100".U, /* j */
  "b01110101".U, /* k */
  "b00110000".U, /* l */
  "b00010100".U, /* m */
  "b01010100".U, /* n */
  "b01011100".U, /* o */
  "b01110011".U, /* p */
  "b01100111".U, /* q */
  "b01010000".U, /* r */
  "b01101101".U, /* s */
  "b01111000".U, /* t */
  "b00011100".U, /* u */
  "b00011100".U, /* v */
  "b00010100".U, /* w */
  "b01110110".U, /* x */
  "b01101110".U, /* y */
  "b01011011".U, /* z */
  "b01000110".U, /* { */
  "b00110000".U, /* | */
  "b01110000".U, /* } */
  "b00000001".U, /* ~ */
  "b00000000".U /* (del) */
)

// Assign output
io.out := decoding_table(io.in)

}
