li t0 0x30 # led_reg address
li t1 0x40 # pwm_reg base address
li t2 0x00 # base_pwm_shift


# LED PWM values
li s0 0
li s1 6
li s2 30
li s3 255
li s4 255
li s5 30
li s6 6
li s7 0

# Turn on all LEDs
li t6 0xFFFF # All LEDs high
sw t6 0(t0)  # Store to MemoryMappedIO

store_pwm_values: # Cycle through PWM values on each LED
	add t3 t2 t1	# current_pwm_shift

    sb s0 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s1 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s2 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s3 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s4 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s5 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s6 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)
    sb s7 0(t3)	# Store PWM
    addi t3 t3 1 	# increment current_pwm_shift
    andi t3 t3 0xF	# remove higher address bits (loop around LEDs if necessary)

    addi t2 t2 1 	# increment base_pwm_shift
    andi t2 t2 0xF	# remove higher address bits (loop around LEDs if necessary)

counter:
	li t4 0 	  # Counter reset
    li t5 1		  # counter target init
    slli t5 t5 22 # counter target bitshift
counter_loop:
	addi t4 t4 1	# increment counter
    blt t4 t5 counter_loop
    nop # Justin Case
    nop # Justin Case
    nop # Justin Case
    j store_pwm_values











